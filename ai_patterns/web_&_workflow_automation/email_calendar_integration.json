{"name": "Email & Calendar Integration", "description": "Unfolding Linguistic Possibilities.", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"nodes": [{"data": {"id": "Agent-JwqKh", "node": {"template": {"_type": "Component", "tools": {"trace_as_metadata": true, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools", "value": "", "display_name": "Tools", "advanced": false, "input_types": ["Tool"], "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "add_current_date_tool": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "add_current_date_tool", "value": true, "display_name": "Current Date", "advanced": true, "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "agent_description": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "agent_description", "value": "A helpful assistant with access to the following tools:", "display_name": "Agent Description [Deprecated]", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "agent_llm": {"tool_mode": false, "trace_as_metadata": true, "options": ["Anthropic", "Google Generative AI", "Groq", "OpenAI", "Custom"], "options_metadata": [{"icon": "Anthropic"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "OpenAI"}, {"icon": "brain"}], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "agent_llm", "value": "OpenAI", "display_name": "Model Provider", "advanced": false, "input_types": [], "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "api_key": {"load_from_db": true, "required": false, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "OpenAI API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "handle_parsing_errors": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "handle_parsing_errors", "value": true, "display_name": "Handle Parse Errors", "advanced": true, "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "input_value": {"trace_as_input": true, "tool_mode": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Input", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The input provided by the user for the agent to process.", "title_case": false, "type": "str", "_input_type": "MessageInput"}, "json_mode": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "json_mode", "value": false, "display_name": "JSON Mode", "advanced": true, "dynamic": false, "info": "If True, it will output JSON regardless of passing a schema.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "max_iterations": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_iterations", "value": 15, "display_name": "Max Iterations", "advanced": true, "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_retries": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_retries", "value": 5, "display_name": "Max Retries", "advanced": true, "dynamic": false, "info": "The maximum number of retries to make when generating.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "range_spec": {"step_type": "float", "min": 0, "max": 128000, "step": 0.1}, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": "", "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "model_kwargs": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "model_kwargs", "value": {}, "display_name": "Model Kwargs", "advanced": true, "dynamic": false, "info": "Additional keyword arguments to pass to the model.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["gpt-4o-mini", "gpt-4o", "gpt-4.1", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4.5-preview", "gpt-4-turbo", "gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo", "o1", "o1-mini", "o1-pro", "o3-mini", "o3", "o3-pro", "o4-mini", "o4-mini-high"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "gpt-4o", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "title_case": false, "type": "str", "_input_type": "DropdownInput", "load_from_db": false}, "n_messages": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "n_messages", "value": 100, "display_name": "Number of Chat History Messages", "advanced": true, "dynamic": false, "info": "Number of chat history messages to retrieve.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "openai_api_base": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_api_base", "value": "", "display_name": "OpenAI API Base", "advanced": true, "dynamic": false, "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "seed": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "seed", "value": 1, "display_name": "Seed", "advanced": true, "dynamic": false, "info": "The seed controls the reproducibility of the job.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "system_prompt": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "system_prompt", "value": "You are an administrative assistant AI agent. Your task is to fetch emails, summarize them based on user-defined criteria, and send the summarized content to a designated Slack channel.\n\n## Available tools:\n\nGMAIL_FETCH_EMAILS: Use this tool to retrieve emails. Do not include the email payload.\n\nSLACK_SENDS_A_MESSAGE_TO_SLACK_CHANNEL: Use this tool to send the summary to the appropriate Slack channel.\n\n## Summary format:\n\n - Email Summary -\n[user-defined criterion]\n\n1. [Sender name] \u2014 Subject: [Email subject]  \n   [Summary of the email content]\n\n2. [Sender name] \u2014 Subject: [Email subject]  \n   [Summary of the email content]\n\n...\n\n\n## Instructions:\n\n1. Identify relevant emails using GMAIL_FETCH_EMAILS, based on the criterion specified by the user.\n\n2. Summarize the content of each email briefly and clearly. Do not include full payloads or confidential data.\n\n3. Format the summary as shown above, preserving clarity and consistency.\n\n4. Send the summary using SLACK_SENDS_A_MESSAGE_TO_SLACK_CHANNEL", "display_name": "Agent Instructions", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "slider", "_input_type": "SliderInput"}, "timeout": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "timeout", "value": 700, "display_name": "Timeout", "advanced": true, "dynamic": false, "info": "The timeout for requests to OpenAI completion API.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "verbose": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "verbose", "value": true, "display_name": "Verbose", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "icon": "bot", "base_classes": ["Message"], "display_name": "Agent", "documentation": "https://docs.langflow.org/agents", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "response", "hidden": false, "display_name": "Response", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "n_messages", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "add_current_date_tool"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "last_updated": "2025-08-13T20:44:44.885Z"}, "showNode": true, "type": "Agent"}, "dragging": false, "id": "Agent-JwqKh", "measured": {"height": 591, "width": 320}, "position": {"x": 831.9958583711688, "y": -16.28622322531932}, "selected": false, "type": "genericNode"}, {"data": {"id": "ChatInput-4LOIm", "node": {"template": {"_type": "Component", "files": {"trace_as_metadata": true, "file_path": "", "fileTypes": ["txt", "md", "mdx", "csv", "json", "yaml", "yml", "xml", "html", "htm", "pdf", "docx", "py", "sh", "sql", "js", "ts", "tsx", "jpg", "jpeg", "png", "bmp", "image"], "temp_file": true, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "files", "value": "", "display_name": "Files", "advanced": true, "dynamic": false, "info": "Files to be sent with the message.", "title_case": false, "type": "file", "_input_type": "FileInput"}, "background_color": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "background_color", "value": "", "display_name": "Background Color", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The background color of the icon.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "chat_icon": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "chat_icon", "value": "", "display_name": "Icon", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The icon of the message.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Input Text", "advanced": false, "input_types": [], "dynamic": false, "info": "Message to be passed as input.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "sender": {"tool_mode": false, "trace_as_metadata": true, "options": ["Machine", "User"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "User", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "User", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "text_color": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "text_color", "value": "", "display_name": "Text Color", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The text color of the name", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Get chat inputs from the Playground.", "icon": "MessagesSquare", "base_classes": ["Message"], "display_name": "Chat Input", "documentation": "https://docs.langflow.org/components-io#chat-input", "minimized": true, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "display_name": "Chat Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "files", "background_color", "chat_icon", "text_color"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false}, "showNode": true, "type": "ChatInput"}, "dragging": false, "id": "ChatInput-4LOIm", "measured": {"height": 203, "width": 320}, "position": {"x": 338.3635669456448, "y": 476.37722110341304}, "selected": false, "type": "genericNode"}, {"data": {"id": "ChatOutput-tbuFc", "node": {"template": {"_type": "Component", "input_value": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Inputs", "advanced": false, "input_types": ["Data", "DataFrame", "Message"], "dynamic": false, "info": "Message to be passed as output.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "background_color": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "background_color", "value": "", "display_name": "Background Color", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The background color of the icon.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "chat_icon": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "chat_icon", "value": "", "display_name": "Icon", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The icon of the message.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "clean_data": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "clean_data", "value": true, "display_name": "Basic Clean Data", "advanced": true, "dynamic": false, "info": "Whether to clean the data", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "data_template": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "data_template", "value": "{text}", "display_name": "Data Template", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "sender": {"tool_mode": false, "trace_as_metadata": true, "options": ["Machine", "User"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "Machine", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "AI", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "text_color": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "text_color", "value": "", "display_name": "Text Color", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The text color of the name", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Display a chat message in the Playground.", "icon": "MessagesSquare", "base_classes": ["Message"], "display_name": "Chat Output", "documentation": "https://docs.langflow.org/components-io#chat-output", "minimized": true, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "display_name": "Output Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template", "background_color", "chat_icon", "text_color", "clean_data"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false}, "showNode": true, "type": "ChatOutput"}, "dragging": false, "id": "ChatOutput-tbuFc", "measured": {"height": 165, "width": 320}, "position": {"x": 1242.4081723202548, "y": 410.7950116603543}, "selected": false, "type": "genericNode"}, {"id": "GmailAPI-C03Hz", "type": "genericNode", "position": {"x": 334.4993072319268, "y": -281.3825361752147}, "data": {"node": {"template": {"_type": "Component", "attachment": {"trace_as_metadata": true, "file_path": "", "fileTypes": ["csv", "txt", "doc", "docx", "xls", "xlsx", "pdf", "png", "jpg", "jpeg", "gif", "zip", "rar", "ppt", "pptx"], "temp_file": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "attachment", "value": "", "display_name": "Add Attachment", "advanced": false, "dynamic": false, "info": "Add an attachment", "title_case": false, "type": "file", "_input_type": "FileInput"}, "action": {"tool_mode": false, "trace_as_metadata": true, "helper_text": "Please connect before selecting actions.", "helper_text_metadata": {"variant": "destructive"}, "search_category": [], "options": [], "limit": 1, "required": false, "placeholder": "Select action", "show": false, "name": "action", "value": "disabled", "display_name": "Action", "advanced": false, "dynamic": false, "info": "", "real_time_refresh": true, "title_case": false, "type": "sortableList", "_input_type": "SortableListInput"}, "api_key": {"load_from_db": false, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "attachment_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "attachment_id", "value": "", "display_name": "Attachment ID", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Id of the attachment", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "auth_link": {"trace_as_metadata": true, "auth_tooltip": "Please provide a valid Composio API Key.", "required": false, "placeholder": "", "show": false, "name": "auth_link", "value": "", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "auth", "_input_type": "AuthInput"}, "bcc": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "bcc", "value": "", "display_name": "BCC", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "body": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "body", "value": "", "display_name": "Body", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Content of the email", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "cc": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "cc", "value": "", "display_name": "CC", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Email addresses to CC (Carbon Copy) in the email, separated by commas", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "import json\nfrom typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs.inputs import (\n    BoolInput,\n    FileInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGmailAPIComponent(ComposioBaseComponent):\n    \"\"\"Gmail API component for interacting with Gmail services.\"\"\"\n\n    display_name: str = \"Gmail\"\n    name = \"GmailAPI\"\n    icon = \"Google\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"gmail\"\n\n    # Gmail-specific actions\n    _actions_data: dict = {\n        \"GMAIL_SEND_EMAIL\": {\n            \"display_name\": \"Send Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"gmail_user_id\",\n                \"attachment\",\n            ],\n        },\n        \"GMAIL_FETCH_EMAILS\": {\n            \"display_name\": \"Fetch Emails\",\n            \"action_fields\": [\n                \"gmail_user_id\",\n                \"max_results\",\n                \"query\",\n                \"page_token\",\n                \"label_ids\",\n                \"include_spam_trash\",\n            ],\n            \"get_result_field\": True,\n            \"result_field\": \"messages\",\n        },\n        \"GMAIL_GET_PROFILE\": {\n            \"display_name\": \"Get User Profile\",\n            \"action_fields\": [\"gmail_user_id\"],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID\": {\n            \"display_name\": \"Get Email By ID\",\n            \"action_fields\": [\"message_id\", \"gmail_user_id\", \"format\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_CREATE_EMAIL_DRAFT\": {\n            \"display_name\": \"Create Draft Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"attachment\",\n                \"gmail_user_id\",\n            ],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_THREAD_ID\": {\n            \"display_name\": \"Get Message By Thread ID\",\n            \"action_fields\": [\"thread_id\", \"page_token\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_LIST_THREADS\": {\n            \"display_name\": \"List Email Threads\",\n            \"action_fields\": [\"max_results\", \"query\", \"gmail_user_id\", \"page_token\"],\n            \"get_result_field\": True,\n            \"result_field\": \"threads\",\n        },\n        \"GMAIL_REPLY_TO_THREAD\": {\n            \"display_name\": \"Reply To Thread\",\n            \"action_fields\": [\"thread_id\", \"message_body\", \"recipient_email\", \"gmail_user_id\", \"cc\", \"bcc\", \"is_html\"],\n        },\n        \"GMAIL_LIST_LABELS\": {\n            \"display_name\": \"List Email Labels\",\n            \"action_fields\": [\"gmail_user_id\"],\n            \"get_result_field\": True,\n            \"result_field\": \"labels\",\n        },\n        \"GMAIL_CREATE_LABEL\": {\n            \"display_name\": \"Create Email Label\",\n            \"action_fields\": [\"label_name\", \"label_list_visibility\", \"message_list_visibility\", \"gmail_user_id\"],\n        },\n        \"GMAIL_GET_PEOPLE\": {\n            \"display_name\": \"Get Contacts\",\n            \"action_fields\": [\"resource_name\", \"person_fields\"],\n            \"get_result_field\": True,\n            \"result_field\": \"people_data\",\n        },\n        \"GMAIL_REMOVE_LABEL\": {\n            \"display_name\": \"Delete Email Label\",\n            \"action_fields\": [\"label_id\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_GET_ATTACHMENT\": {\n            \"display_name\": \"Get Attachment\",\n            \"action_fields\": [\"message_id\", \"attachment_id\", \"file_name\", \"gmail_user_id\"],\n        },\n    }\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\"is_html\", \"include_spam_trash\"}\n\n    # Combine base inputs with Gmail-specific inputs\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        # Email composition fields\n        MessageTextInput(\n            name=\"recipient_email\",\n            display_name=\"Recipient Email\",\n            info=\"Email address of the recipient\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"subject\",\n            display_name=\"Subject\",\n            info=\"Subject of the email\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"body\",\n            display_name=\"Body\",\n            required=True,\n            info=\"Content of the email\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"cc\",\n            display_name=\"CC\",\n            info=\"Email addresses to CC (Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"bcc\",\n            display_name=\"BCC\",\n            info=\"Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_html\",\n            display_name=\"Is HTML\",\n            info=\"Specify whether the email body contains HTML content (true/false)\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        # Email retrieval and management fields\n        MessageTextInput(\n            name=\"gmail_user_id\",\n            display_name=\"User ID\",\n            info=\"The user's email address or 'me' for the authenticated user\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            required=True,\n            info=\"Maximum number of emails to be returned\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_id\",\n            display_name=\"Message ID\",\n            info=\"The ID of the specific email message\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"thread_id\",\n            display_name=\"Thread ID\",\n            info=\"The ID of the email thread\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_body\",\n            display_name=\"Message Body\",\n            info=\"The body content of the message to be sent\",\n            show=False,\n            advanced=True,\n        ),\n        # Label management fields\n        MessageTextInput(\n            name=\"label_name\",\n            display_name=\"Label Name\",\n            info=\"Name of the Gmail label to create, modify, or filter by\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_id\",\n            display_name=\"Label ID\",\n            info=\"The ID of the Gmail label\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_ids\",\n            display_name=\"Label Ids\",\n            info=\"Comma-separated list of label IDs to filter messages\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"label_list_visibility\",\n            display_name=\"Label List Visibility\",\n            info=\"The visibility of the label in the label list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"message_list_visibility\",\n            display_name=\"Message List Visibility\",\n            info=\"The visibility of the label in the message list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        # Pagination and filtering\n        MessageTextInput(\n            name=\"page_token\",\n            display_name=\"Page Token\",\n            info=\"Token for retrieving the next page of results\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_spam_trash\",\n            display_name=\"Include messages from Spam/Trash\",\n            info=\"Include messages from SPAM and TRASH in the results\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"The format to return the message in. Possible values: minimal, full, raw, metadata\",\n            show=False,\n            advanced=True,\n        ),\n        # Contact management fields\n        MessageTextInput(\n            name=\"resource_name\",\n            display_name=\"Resource Name\",\n            info=\"The resource name of the person to provide information about\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"person_fields\",\n            display_name=\"Person fields\",\n            info=\"Fields to return for the person. Multiple fields can be specified by separating them with commas\",\n            show=False,\n            advanced=True,\n        ),\n        # Attachment handling\n        MessageTextInput(\n            name=\"attachment_id\",\n            display_name=\"Attachment ID\",\n            info=\"Id of the attachment\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"file_name\",\n            display_name=\"File name\",\n            info=\"File name of the attachment file\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        FileInput(\n            name=\"attachment\",\n            display_name=\"Add Attachment\",\n            file_types=[\n                \"csv\",\n                \"txt\",\n                \"doc\",\n                \"docx\",\n                \"xls\",\n                \"xlsx\",\n                \"pdf\",\n                \"png\",\n                \"jpg\",\n                \"jpeg\",\n                \"gif\",\n                \"zip\",\n                \"rar\",\n                \"ppt\",\n                \"pptx\",\n            ],\n            info=\"Add an attachment\",\n            show=False,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in [\"cc\", \"bcc\", \"label_ids\"] and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    params[field] = value\n\n            if params.get(\"gmail_user_id\"):\n                params[\"user_id\"] = params.pop(\"gmail_user_id\")\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"data\", {}).get(\"message\", \"{}\")\n                try:\n                    error_data = json.loads(message_str).get(\"error\", {})\n                except json.JSONDecodeError:\n                    error_data = {\"error\": \"Failed to get exact error details\"}\n                return {\n                    \"code\": error_data.get(\"code\"),\n                    \"message\": error_data.get(\"message\"),\n                    \"errors\": error_data.get(\"errors\", []),\n                    \"status\": error_data.get(\"status\"),\n                }\n\n            result_data = result.get(\"data\", {})\n            actions_data = self._actions_data.get(action_key, {})\n            # If 'get_result_field' is True and 'result_field' is specified, extract the data\n            # using 'result_field'. Otherwise, fall back to the entire 'data' field in the response.\n            if actions_data.get(\"get_result_field\") and actions_data.get(\"result_field\"):\n                result_data = result_data.get(actions_data.get(\"result_field\"), result.get(\"data\", []))\n            if len(result_data) != 1 and not actions_data.get(\"result_field\") and actions_data.get(\"get_result_field\"):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            return result_data  # noqa: TRY300\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            \"GMAIL_SEND_EMAIL\",\n            \"GMAIL_FETCH_EMAILS\",\n        }\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "file_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "file_name", "value": "", "display_name": "File name", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "File name of the attachment file", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "format": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "format", "value": "", "display_name": "Format", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The format to return the message in. Possible values: minimal, full, raw, metadata", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "gmail_user_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "gmail_user_id", "value": "", "display_name": "User ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The user's email address or 'me' for the authenticated user", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "include_spam_trash": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "include_spam_trash", "value": false, "display_name": "Include messages from Spam/Trash", "advanced": true, "dynamic": false, "info": "Include messages from SPAM and TRASH in the results", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "is_html": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "is_html", "value": false, "display_name": "Is HTML", "advanced": true, "dynamic": false, "info": "Specify whether the email body contains HTML content (true/false)", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "label_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "label_id", "value": "", "display_name": "Label ID", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The ID of the Gmail label", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "label_ids": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "label_ids", "value": "", "display_name": "Label Ids", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Comma-separated list of label IDs to filter messages", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "label_list_visibility": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "label_list_visibility", "value": "", "display_name": "Label List Visibility", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The visibility of the label in the label list in the Gmail web interface", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "label_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "label_name", "value": "", "display_name": "Label Name", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Name of the Gmail label to create, modify, or filter by", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "max_results": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "max_results", "value": "", "display_name": "Max Results", "advanced": false, "dynamic": false, "info": "Maximum number of emails to be returned", "title_case": false, "type": "int", "_input_type": "IntInput"}, "message_body": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "message_body", "value": "", "display_name": "Message Body", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The body content of the message to be sent", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "message_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "message_id", "value": "", "display_name": "Message ID", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The ID of the specific email message", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "message_list_visibility": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "message_list_visibility", "value": "", "display_name": "Message List Visibility", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The visibility of the label in the message list in the Gmail web interface", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "page_token": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "page_token", "value": "", "display_name": "Page Token", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Token for retrieving the next page of results", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "person_fields": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "person_fields", "value": "", "display_name": "Person fields", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Fields to return for the person. Multiple fields can be specified by separating them with commas", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "query": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "query", "value": "", "display_name": "Query", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "recipient_email": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "recipient_email", "value": "", "display_name": "Recipient Email", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Email address of the recipient", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "resource_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "resource_name", "value": "", "display_name": "Resource Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The resource name of the person to provide information about", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "subject": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "subject", "value": "", "display_name": "Subject", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Subject of the email", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "thread_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "thread_id", "value": "", "display_name": "Thread ID", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The ID of the email thread", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "Error loading actions", "show": true, "name": "tools_metadata", "value": [], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "icon": "Google", "base_classes": ["DataFrame"], "display_name": "Gmail", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "auth_link", "action", "recipient_email", "subject", "body", "cc", "bcc", "is_html", "gmail_user_id", "max_results", "message_id", "thread_id", "query", "message_body", "label_name", "label_id", "label_ids", "label_list_visibility", "message_list_visibility", "page_token", "include_spam_trash", "format", "resource_name", "person_fields", "attachment_id", "file_name", "attachment"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": true, "category": "composio", "key": "GmailAPI", "score": 0.001, "last_updated": "2025-08-13T20:44:54.804Z"}, "showNode": true, "type": "GmailAPI", "id": "GmailAPI-C03Hz"}, "selected": false, "measured": {"width": 320, "height": 259}, "dragging": false}, {"id": "ComposioSlackAPIComponent-VsTtD", "type": "genericNode", "position": {"x": 334.24494526065746, "y": 83.01064858122064}, "data": {"node": {"template": {"_type": "Component", "SLACK_CREATE_A_REMINDER_text": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_CREATE_A_REMINDER_text", "value": "", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The content of the reminder", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_CREATE_A_REMINDER_time": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_CREATE_A_REMINDER_time", "value": "", "display_name": "Time", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. 'in 15 minutes,' or 'every Thursday') ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_CREATE_A_REMINDER_user": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_CREATE_A_REMINDER_user", "value": "", "display_name": "User", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_FETCH_CONVERSATION_HISTORY_channel": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_FETCH_CONVERSATION_HISTORY_channel", "value": "", "display_name": "Channel ID", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Channel ID to fetch history for.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_FETCH_CONVERSATION_HISTORY_cursor": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_FETCH_CONVERSATION_HISTORY_cursor", "value": "", "display_name": "Cursor", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first 'page' of the collection. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_FETCH_CONVERSATION_HISTORY_inclusive": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_FETCH_CONVERSATION_HISTORY_inclusive", "value": false, "display_name": "Inclusive", "advanced": true, "dynamic": false, "info": "Include messages with latest or oldest timestamp in results only when either timestamp is specified. ", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_FETCH_CONVERSATION_HISTORY_latest": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_FETCH_CONVERSATION_HISTORY_latest", "value": "", "display_name": "Latest", "advanced": true, "dynamic": false, "info": "End of time range of messages to include in results.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_FETCH_CONVERSATION_HISTORY_limit": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_FETCH_CONVERSATION_HISTORY_limit", "value": "", "display_name": "Limit", "advanced": true, "dynamic": false, "info": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. ", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_FETCH_CONVERSATION_HISTORY_oldest": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_FETCH_CONVERSATION_HISTORY_oldest", "value": "", "display_name": "Oldest", "advanced": true, "dynamic": false, "info": "Start of time range of messages to include in results.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_cursor": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_cursor", "value": "", "display_name": "Cursor", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first 'page' of the collection", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_exclude_archived": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_exclude_archived", "value": false, "display_name": "Exclude Archived", "advanced": false, "dynamic": false, "info": "Set to `true` to exclude archived channels from the list", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_limit": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_limit", "value": 1, "display_name": "Limit", "advanced": false, "dynamic": false, "info": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. ", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_types": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_types", "value": "", "display_name": "Types", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_cursor": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_cursor", "value": "", "display_name": "Cursor", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first `page` of the collection", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_include_locale": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_include_locale", "value": false, "display_name": "Include Locale", "advanced": false, "dynamic": false, "info": "Set this to `true` to receive the locale for users. Defaults to `false`", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_limit": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_limit", "value": 1, "display_name": "Limit", "advanced": false, "dynamic": false, "info": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_as_user": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_as_user", "value": false, "display_name": "As User", "advanced": true, "dynamic": false, "info": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_attachments": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_attachments", "value": "", "display_name": "Attachments", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A JSON-based array of structured attachments, presented as a URL-encoded string. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_blocks": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_blocks", "value": "", "display_name": "Blocks", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A JSON-based array of structured blocks, presented as a URL-encoded string. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_channel": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_channel", "value": "", "display_name": "Channel", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_link_names": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_link_names", "value": false, "display_name": "Link Names", "advanced": true, "dynamic": false, "info": "Find and link channel names and usernames.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_parse": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_parse", "value": "", "display_name": "Parse", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Change how messages are treated. Defaults to `none`", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_post_at": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_post_at", "value": "", "display_name": "Post At", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Unix EPOCH timestamp of time in future to send the message.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_reply_broadcast": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_reply_broadcast", "value": false, "display_name": "Reply Broadcast", "advanced": true, "dynamic": false, "info": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_text": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_text", "value": "", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "How this field works and whether it is required depends on other fields you use in your API call", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_thread_ts": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_thread_ts", "value": "", "display_name": "Thread Ts", "advanced": true, "dynamic": false, "info": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. ", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_links": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_links", "value": false, "display_name": "Unfurl Links", "advanced": true, "dynamic": false, "info": "Pass true to enable unfurling of primarily text-based content.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_media": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_media", "value": false, "display_name": "Unfurl Media", "advanced": true, "dynamic": false, "info": "Pass false to disable unfurling of media content.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_count": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_count", "value": 1, "display_name": "Count", "advanced": true, "dynamic": false, "info": "Pass the number of results you want per 'page'. Maximum of `100`.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_highlight": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_highlight", "value": false, "display_name": "Highlight", "advanced": true, "dynamic": false, "info": "Pass a value of `true` to enable query highlight markers", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_page": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_page", "value": "", "display_name": "Page", "advanced": true, "dynamic": false, "info": "Page", "title_case": false, "type": "int", "_input_type": "IntInput"}, "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_query": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_query", "value": "", "display_name": "Query", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Search query.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort", "value": "", "display_name": "Sort", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Return matches sorted by either `score` or `timestamp`.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort_dir": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort_dir", "value": "", "display_name": "Sort Dir", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Change sort direction to ascending (`asc`) or descending (`desc`).", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_as_user": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_as_user", "value": false, "display_name": "As User", "advanced": true, "dynamic": false, "info": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_attachments": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_attachments", "value": "", "display_name": "Attachments", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A JSON-based array of structured attachments, presented as a URL-encoded string. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_blocks": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_blocks", "value": "", "display_name": "Blocks", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A JSON-based array of structured blocks, presented as a URL-encoded string. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_channel": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_channel", "value": "", "display_name": "Channel", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_emoji": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_emoji", "value": "", "display_name": "Icon Emoji", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_url": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_url", "value": "", "display_name": "Icon Url", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_link_names": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_link_names", "value": false, "display_name": "Link Names", "advanced": true, "dynamic": false, "info": "Find and link channel names and usernames.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_mrkdwn": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_mrkdwn", "value": false, "display_name": "Mrkdwn", "advanced": true, "dynamic": false, "info": "Disable Slack markup parsing by setting to `false`. Enabled by default.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_parse": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_parse", "value": "", "display_name": "Parse", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Change how messages are treated. Defaults to `none` ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_reply_broadcast": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_reply_broadcast", "value": false, "display_name": "Reply Broadcast", "advanced": true, "dynamic": false, "info": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_text": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_text", "value": "", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "How this field works and whether it is required depends on other fields you use in your API call", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_thread_ts": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_thread_ts", "value": "", "display_name": "Thread Ts", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_links": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_links", "value": false, "display_name": "Unfurl Links", "advanced": true, "dynamic": false, "info": "Pass true to enable unfurling of primarily text-based content.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_media": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_media", "value": false, "display_name": "Unfurl Media", "advanced": true, "dynamic": false, "info": "Pass false to disable unfurling of media content.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_username": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_username", "value": "", "display_name": "Username", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_as_user": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_as_user", "value": "", "display_name": "As User", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Pass true to update the message as the authed user", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_attachments": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_attachments", "value": "", "display_name": "Attachments", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_blocks": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_blocks", "value": "", "display_name": "Blocks", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A JSON-based array of structured blocks, presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_channel": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_channel", "value": "", "display_name": "Channel ID", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Channel ID containing the message to be updated.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_link_names": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_link_names", "value": "", "display_name": "Link Names", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_parse": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_parse", "value": "", "display_name": "Parse", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_text": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_text", "value": "", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "New text for the message, using the default formatting rules. It's not required when presenting `blocks` or `attachments`. ", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "SLACK_UPDATES_A_SLACK_MESSAGE_ts": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "SLACK_UPDATES_A_SLACK_MESSAGE_ts", "value": "", "display_name": "Ts", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Timestamp of the message to be updated.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "action": {"tool_mode": false, "trace_as_metadata": true, "helper_text": null, "helper_text_metadata": {}, "search_category": [], "options": [{"name": "List Users", "metadata": "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION"}, {"name": "List Channels", "metadata": "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS"}, {"name": "Update Slack Chat Message", "metadata": "SLACK_UPDATES_A_SLACK_MESSAGE"}, {"name": "Post Message To Channel", "metadata": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL"}, {"name": "Search Messages Endpoint", "metadata": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY"}, {"name": "Retrieve conversation history", "metadata": "SLACK_FETCH_CONVERSATION_HISTORY"}, {"name": "Schedule Message In Chat", "metadata": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME"}, {"name": "Add Reminder For User", "metadata": "SLACK_CREATE_A_REMINDER"}], "limit": 1, "required": false, "placeholder": "Select action", "show": false, "name": "action", "value": "disabled", "display_name": "Action", "advanced": false, "dynamic": false, "info": "", "real_time_refresh": true, "title_case": false, "type": "sortableList", "_input_type": "SortableListInput"}, "api_key": {"load_from_db": true, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "auth_link": {"trace_as_metadata": true, "auth_tooltip": "Disconnect", "required": false, "placeholder": "", "show": false, "name": "auth_link", "value": "validated", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "auth", "_input_type": "AuthInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioSlackAPIComponent(ComposioBaseComponent):\n    display_name: str = \"Slack\"\n    description: str = \"Slack API\"\n    icon = \"Slack\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"slack\"\n\n    _actions_data: dict = {\n        \"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION\": {\n            \"display_name\": \"List Users\",\n            \"action_fields\": [\n                \"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_limit\",\n                \"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_cursor\",\n                \"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_include_locale\",\n            ],\n        },\n        \"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS\": {\n            \"display_name\": \"List Channels\",\n            \"action_fields\": [\n                \"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_exclude_archived\",\n                \"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_types\",\n                \"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_limit\",\n                \"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_cursor\",\n            ],\n        },\n        \"SLACK_UPDATES_A_SLACK_MESSAGE\": {\n            \"display_name\": \"Update Slack Chat Message\",\n            \"action_fields\": [\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_as_user\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_attachments\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_blocks\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_channel\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_link_names\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_parse\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_text\",\n                \"SLACK_UPDATES_A_SLACK_MESSAGE_ts\",\n            ],\n        },\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL\": {\n            \"display_name\": \"Post Message To Channel\",\n            \"action_fields\": [\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_as_user\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_attachments\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_blocks\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_channel\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_emoji\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_url\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_link_names\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_mrkdwn\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_parse\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_reply_broadcast\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_text\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_thread_ts\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_links\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_media\",\n                \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_username\",\n            ],\n        },\n        \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY\": {\n            \"display_name\": \"Search Messages Endpoint\",\n            \"action_fields\": [\n                \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_count\",\n                \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_highlight\",\n                \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_page\",\n                \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_query\",\n                \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort\",\n                \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort_dir\",\n            ],\n        },\n        \"SLACK_FETCH_CONVERSATION_HISTORY\": {\n            \"display_name\": \"Retrieve conversation history\",\n            \"action_fields\": [\n                \"SLACK_FETCH_CONVERSATION_HISTORY_channel\",\n                \"SLACK_FETCH_CONVERSATION_HISTORY_latest\",\n                \"SLACK_FETCH_CONVERSATION_HISTORY_oldest\",\n                \"SLACK_FETCH_CONVERSATION_HISTORY_inclusive\",\n                \"SLACK_FETCH_CONVERSATION_HISTORY_limit\",\n                \"SLACK_FETCH_CONVERSATION_HISTORY_cursor\",\n            ],\n        },\n        \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME\": {\n            \"display_name\": \"Schedule Message In Chat\",\n            \"action_fields\": [\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_as_user\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_attachments\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_blocks\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_channel\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_link_names\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_parse\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_post_at\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_reply_broadcast\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_text\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_thread_ts\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_links\",\n                \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_media\",\n            ],\n        },\n        \"SLACK_CREATE_A_REMINDER\": {\n            \"display_name\": \"Add Reminder For User\",\n            \"action_fields\": [\n                \"SLACK_CREATE_A_REMINDER_text\",\n                \"SLACK_CREATE_A_REMINDER_time\",\n                \"SLACK_CREATE_A_REMINDER_user\",\n            ],\n        },\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_include_locale\",\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_as_user\",\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_link_names\",\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_mrkdwn\",\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_reply_broadcast\",\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_links\",\n        \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_media\",\n        \"SLACK_FETCH_CONVERSATION_HISTORY_inclusive\",\n        \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_as_user\",\n        \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_link_names\",\n        \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_reply_broadcast\",\n        \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_links\",\n        \"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_media\",\n        \"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_exclude_archived\",\n        \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_highlight\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        IntInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_limit\",\n            display_name=\"Limit\",\n            info=\"The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. \",  # noqa: E501\n            show=False,\n            value=1,\n        ),\n        MessageTextInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_cursor\",\n            display_name=\"Cursor\",\n            info=\"Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first `page` of the collection\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_include_locale\",\n            display_name=\"Include Locale\",\n            info=\"Set this to `true` to receive the locale for users. Defaults to `false`\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_as_user\",\n            display_name=\"As User\",\n            info=\"Pass true to post the message as the authed user, instead of as a bot. Defaults to false\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_attachments\",\n            display_name=\"Attachments\",\n            info=\"A JSON-based array of structured attachments, presented as a URL-encoded string. \",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_blocks\",\n            display_name=\"Blocks\",\n            info=\"A JSON-based array of structured blocks, presented as a URL-encoded string. \",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_channel\",\n            display_name=\"Channel\",\n            info=\"Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name \",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_emoji\",\n            display_name=\"Icon Emoji\",\n            info=\"Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_url\",\n            display_name=\"Icon Url\",\n            info=\"URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_link_names\",\n            display_name=\"Link Names\",\n            info=\"Find and link channel names and usernames.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_mrkdwn\",\n            display_name=\"Mrkdwn\",\n            info=\"Disable Slack markup parsing by setting to `false`. Enabled by default.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_parse\",\n            display_name=\"Parse\",\n            info=\"Change how messages are treated. Defaults to `none` \",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_reply_broadcast\",\n            display_name=\"Reply Broadcast\",\n            info=\"Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_text\",\n            display_name=\"Text\",\n            info=\"How this field works and whether it is required depends on other fields you use in your API call\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_thread_ts\",\n            display_name=\"Thread Ts\",\n            info=\"Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. \",  # noqa: E501\n            show=False,\n        ),\n        BoolInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_links\",\n            display_name=\"Unfurl Links\",\n            info=\"Pass true to enable unfurling of primarily text-based content.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_media\",\n            display_name=\"Unfurl Media\",\n            info=\"Pass false to disable unfurling of media content.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_username\",\n            display_name=\"Username\",\n            info=\"Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_as_user\",\n            display_name=\"As User\",\n            info=\"Pass true to update the message as the authed user\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_attachments\",\n            display_name=\"Attachments\",\n            info=\"A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_blocks\",\n            display_name=\"Blocks\",\n            info=\"A JSON-based array of structured blocks, presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_channel\",\n            display_name=\"Channel ID\",\n            info=\"Channel ID containing the message to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_link_names\",\n            display_name=\"Link Names\",\n            info=\"Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_parse\",\n            display_name=\"Parse\",\n            info=\"Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_text\",\n            display_name=\"Text\",\n            info=\"New text for the message, using the default formatting rules. It's not required when presenting `blocks` or `attachments`. \",  # noqa: E501\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"SLACK_UPDATES_A_SLACK_MESSAGE_ts\",\n            display_name=\"Ts\",\n            info=\"Timestamp of the message to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_FETCH_CONVERSATION_HISTORY_channel\",\n            display_name=\"Channel ID\",\n            info=\"Channel ID to fetch history for.\",\n            show=False,\n        ),\n        IntInput(\n            name=\"SLACK_FETCH_CONVERSATION_HISTORY_latest\",\n            display_name=\"Latest\",\n            info=\"End of time range of messages to include in results.\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"SLACK_FETCH_CONVERSATION_HISTORY_oldest\",\n            display_name=\"Oldest\",\n            info=\"Start of time range of messages to include in results.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_FETCH_CONVERSATION_HISTORY_inclusive\",\n            display_name=\"Inclusive\",\n            info=\"Include messages with latest or oldest timestamp in results only when either timestamp is specified. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"SLACK_FETCH_CONVERSATION_HISTORY_limit\",\n            display_name=\"Limit\",\n            info=\"The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_FETCH_CONVERSATION_HISTORY_cursor\",\n            display_name=\"Cursor\",\n            info=\"Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first 'page' of the collection. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_as_user\",\n            display_name=\"As User\",\n            info=\"Pass true to post the message as the authed user, instead of as a bot. Defaults to false\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_attachments\",\n            display_name=\"Attachments\",\n            info=\"A JSON-based array of structured attachments, presented as a URL-encoded string. \",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_blocks\",\n            display_name=\"Blocks\",\n            info=\"A JSON-based array of structured blocks, presented as a URL-encoded string. \",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_channel\",\n            display_name=\"Channel\",\n            info=\"Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name\",\n            show=False,\n            required=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_link_names\",\n            display_name=\"Link Names\",\n            info=\"Find and link channel names and usernames.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_parse\",\n            display_name=\"Parse\",\n            info=\"Change how messages are treated. Defaults to `none`\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_post_at\",\n            display_name=\"Post At\",\n            info=\"Unix EPOCH timestamp of time in future to send the message.\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_reply_broadcast\",\n            display_name=\"Reply Broadcast\",\n            info=\"Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_text\",\n            display_name=\"Text\",\n            info=\"How this field works and whether it is required depends on other fields you use in your API call\",\n            show=False,\n        ),\n        IntInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_thread_ts\",\n            display_name=\"Thread Ts\",\n            info=\"Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. \",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_links\",\n            display_name=\"Unfurl Links\",\n            info=\"Pass true to enable unfurling of primarily text-based content.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_media\",\n            display_name=\"Unfurl Media\",\n            info=\"Pass false to disable unfurling of media content.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_exclude_archived\",\n            display_name=\"Exclude Archived\",\n            info=\"Set to `true` to exclude archived channels from the list\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_types\",\n            display_name=\"Types\",\n            info=\"Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` \",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_limit\",\n            display_name=\"Limit\",\n            info=\"The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. \",  # noqa: E501\n            show=False,\n            value=1,\n        ),\n        MessageTextInput(\n            name=\"SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_cursor\",\n            display_name=\"Cursor\",\n            info=\"Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first 'page' of the collection\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_count\",\n            display_name=\"Count\",\n            info=\"Pass the number of results you want per 'page'. Maximum of `100`.\",\n            show=False,\n            value=1,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_highlight\",\n            display_name=\"Highlight\",\n            info=\"Pass a value of `true` to enable query highlight markers\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_page\",\n            display_name=\"Page\",\n            info=\"Page\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_query\",\n            display_name=\"Query\",\n            info=\"Search query.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort\",\n            display_name=\"Sort\",\n            info=\"Return matches sorted by either `score` or `timestamp`.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort_dir\",\n            display_name=\"Sort Dir\",\n            info=\"Change sort direction to ascending (`asc`) or descending (`desc`).\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_CREATE_A_REMINDER_text\",\n            display_name=\"Text\",\n            info=\"The content of the reminder\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_CREATE_A_REMINDER_time\",\n            display_name=\"Time\",\n            info=\"When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. 'in 15 minutes,' or 'every Thursday') \",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"SLACK_CREATE_A_REMINDER_user\",\n            display_name=\"User\",\n            info=\"The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. \",  # noqa: E501\n            show=False,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n\n                    if param_name == \"as_user\":\n                        value = True\n\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                return {\"error\": result.get(\"error\", \"No response\")}\n\n            return result.get(\"data\", [])\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            \"SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL\",\n            \"SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY\",\n        }\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"name": "SLACK_CREATE_A_REMINDER", "description": "Creates a slack reminder with specified text and time; time accepts unix timestamps, seconds from now, or natural language (e.g., 'in 15 minutes', 'every thursday at 2pm').", "tags": ["SLACK_CREATE_A_REMINDER"], "status": false, "display_name": "Add Reminder For User", "display_description": "Creates a slack reminder with specified text and time; time accepts unix timestamps, seconds from now, or natural language (e.g., 'in 15 minutes', 'every thursday at 2pm').", "readonly": true, "args": {"text": {"description": "The textual content of the reminder message. Please provide a value of type string. This parameter is required.", "examples": ["Submit weekly report", "Follow up with Jane Doe"], "title": "Text", "type": "string"}, "time": {"description": "Specifies when the reminder should occur. This can be a Unix timestamp (integer, up to five years from now), the number of seconds until the reminder (integer, if within 24 hours, e.g., '300' for 5 minutes), or a natural language description (string, e.g., \"in 15 minutes,\" or \"every Thursday at 2pm\", \"daily\"). . Please provide a value of type string. This parameter is required.", "examples": ["1735689600", "900", "in 20 minutes", "every Monday at 10am"], "title": "Time", "type": "string"}, "user": {"default": null, "description": "The ID of the user who will receive the reminder (e.g., 'U012AB3CD4E'). If not specified, the reminder will be sent to the user who created it. . Please provide a value of type string.", "examples": ["U012AB3CD4E", "W1234567890"], "title": "User", "type": "string"}}}, {"name": "SLACK_FETCH_CONVERSATION_HISTORY", "description": "Fetches a chronological list of messages and events from a specified slack conversation, accessible by the authenticated user/bot, with options for pagination and time range filtering.", "tags": ["SLACK_FETCH_CONVERSATION_HISTORY"], "status": false, "display_name": "Retrieve conversation history", "display_description": "Fetches a chronological list of messages and events from a specified slack conversation, accessible by the authenticated user/bot, with options for pagination and time range filtering.", "readonly": true, "args": {"channel": {"description": "The ID of the public channel, private channel, direct message, or multi-person direct message to fetch history from. Please provide a value of type string. This parameter is required.", "examples": ["C1234567890", "G0123456789", "D0123456789"], "title": "Channel", "type": "string"}, "cursor": {"default": null, "description": "Pagination cursor from `next_cursor` of a previous response to fetch subsequent pages. See Slack's pagination documentation for details. Please provide a value of type string.", "examples": ["dXNlcjpVMDYxTkZUVDA="], "title": "Cursor", "type": "string"}, "inclusive": {"default": null, "description": "Include messages with `latest` or `oldest` timestamps in the results; applies only when `latest` or `oldest` is specified. Please provide a value of type boolean.", "examples": ["true", "false"], "title": "Inclusive", "type": "boolean"}, "latest": {"default": null, "description": "End of the time range of messages to include in results. Accepts a Unix timestamp or a Slack timestamp (e.g., '1234567890.000000'). Please provide a value of type string.", "examples": ["1609459200.000000"], "title": "Latest", "type": "string"}, "limit": {"default": null, "description": "Maximum number of messages to return per page (1-1000). Fewer may be returned if at the end of history or channel has fewer messages. Please provide a value of type integer.", "examples": ["100", "200"], "title": "Limit", "type": "integer"}, "oldest": {"default": null, "description": "Start of the time range of messages to include in results. Accepts a Unix timestamp or a Slack timestamp (e.g., '1234567890.000000'). Please provide a value of type string.", "examples": ["1609372800.000000"], "title": "Oldest", "type": "string"}}}, {"name": "SLACK_UPDATES_A_SLACK_MESSAGE", "description": "Updates a slack message, identified by `channel` id and `ts` timestamp, by modifying its `text`, `attachments`, or `blocks`; provide at least one content field, noting `attachments`/`blocks` are replaced if included (`[]` clears them).", "tags": ["SLACK_UPDATES_A_SLACK_MESSAGE"], "status": false, "display_name": "Update Slack Chat Message", "display_description": "Updates a slack message, identified by `channel` id and `ts` timestamp, by modifying its `text`, `attachments`, or `blocks`; provide at least one content field, noting `attachments`/`blocks` are replaced if included (`[]` clears them).", "readonly": true, "args": {"as_user": {"default": null, "description": "Set to `'true'` to update as the authenticated user (bots are considered such). Defaults to app/bot identity. Please provide a value of type string.", "examples": ["true"], "title": "As User", "type": "string"}, "attachments": {"default": null, "description": "URL-encoded JSON array of attachments. Replaces existing attachments if field is provided; use `[]` (empty array string) to clear. Omit field to leave attachments untouched. Required if `text` and `blocks` are absent. See Slack API for format. Please provide a value of type string.", "examples": ["[{\"fallback\": \"Plain-text summary of attachment.\", \"color\": \"#2eb886\", \"text\": \"Optional text that appears within the attachment\"}]", "[]"], "title": "Attachments", "type": "string"}, "blocks": {"default": null, "description": "**DEPRECATED**: Use `markdown_text` field instead. URL-encoded JSON array of layout blocks. Replaces existing blocks if field is provided; use `[]` (empty array string) to clear. Omit field to leave blocks untouched. Required if `text` and `attachments` are absent. See Slack API for format. Please provide a value of type string.", "examples": ["[{\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"This is an updated section block.\"}}]", "[]"], "title": "Blocks", "type": "string"}, "channel": {"description": "The ID of the channel containing the message to be updated. Please provide a value of type string. This parameter is required.", "examples": ["C1234567890", "G0abcdefh"], "title": "Channel", "type": "string"}, "link_names": {"default": null, "description": "Set to `'true'` to link channel/user names in `text`. If not provided, Slack's default update behavior may override original message's linking settings. Please provide a value of type string.", "examples": ["true"], "title": "Link Names", "type": "string"}, "markdown_text": {"default": null, "description": "**PREFERRED**: Write your updated message in markdown for nicely formatted display. Supports headers (#), bold (**text**), italic (*text*), strikethrough (~~text~~), code (```), links ([text](url)), quotes (>), and dividers (---). Your message will be posted with beautiful formatting. Please provide a value of type string.", "examples": ["# Updated Status\n\nThe issue has been **resolved** and systems are *fully operational*.\n\n```bash\n# All services running\nkubectl get services\n```", "## Progress Update\n\n- **Phase 1**: \u2705 Complete\n- *Phase 2*: In progress (80%)\n- ~~Phase 3~~: **Started early**\n\n---\n\n**ETA**: Tomorrow"], "title": "Markdown Text", "type": "string"}, "parse": {"default": null, "description": "Parse mode for `text`: `'full'` (mrkdwn) or `'none'` (literal). If not provided, defaults to `'client'` behavior, overriding original message's `parse` setting. Please provide a value of type string.", "examples": ["full", "none", "client"], "title": "Parse", "type": "string"}, "text": {"default": null, "description": "This sends raw text only, use markdown_text field for formatting. New message text (plain or mrkdwn). Not required if `blocks` or `attachments` are provided. See Slack formatting rules. Please provide a value of type string.", "examples": ["Hello world, this is an *updated* message.", "Check out this link: <https://example.com>"], "title": "Text", "type": "string"}, "ts": {"description": "Timestamp of the message to update (string, Unix time with microseconds, e.g., `'1234567890.123456'`). Please provide a value of type string. This parameter is required.", "examples": ["1625247600.000200"], "title": "Ts", "type": "string"}}}, {"name": "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS", "description": "Deprecated: lists conversations available to the user with various filters and search options. use `list channels` instead.", "tags": ["SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS"], "status": false, "display_name": "List Channels", "display_description": "Deprecated: lists conversations available to the user with various filters and search options. use `list channels` instead.", "readonly": true, "args": {"channel_name": {"default": null, "description": "Filter channels by name (case-insensitive substring match). This is a client-side filter applied after fetching from the API. Please provide a value of type string.", "examples": ["general", "announcements"], "title": "Channel Name", "type": "string"}, "cursor": {"default": null, "description": "Pagination cursor (from a previous response's `next_cursor`) for the next page of results. Omit for the first page. Please provide a value of type string.", "examples": ["dXNlcjpVMDYxTkZUVDI=", "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQ5"], "title": "Cursor", "type": "string"}, "exclude_archived": {"default": null, "description": "Excludes archived channels if true. The API defaults to false (archived channels are included). Please provide a value of type boolean.", "examples": [true, false], "title": "Exclude Archived", "type": "boolean"}, "limit": {"default": 1, "description": "Maximum number of channels to return per page (1 to 1000). Fewer channels may be returned than requested. This schema defaults to 1 if omitted. Please provide a value of type integer.", "examples": [100, 500, 1000], "title": "Limit", "type": "integer"}, "types": {"default": null, "description": "Comma-separated list of channel types to include: `public_channel`, `private_channel`, `mpim` (multi-person direct message), `im` (direct message). The API defaults to `public_channel` if this parameter is omitted. Please provide a value of type string.", "examples": ["public_channel,private_channel", "im,mpim"], "title": "Types", "type": "string"}}}, {"name": "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION", "description": "Deprecated: retrieves a paginated list of all users in a slack workspace. use `list all users` instead.", "tags": ["SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION"], "status": false, "display_name": "List Users", "display_description": "Deprecated: retrieves a paginated list of all users in a slack workspace. use `list all users` instead.", "readonly": true, "args": {"cursor": {"default": null, "description": "Pagination cursor for fetching subsequent pages. Set to `next_cursor` from a previous response's `response_metadata`. Omit for the first page. Please provide a value of type string.", "examples": ["dXNlcjpVMDYxREk0STM=", "dXNlcjpVMDYxREk0STQ="], "title": "Cursor", "type": "string"}, "include_locale": {"default": null, "description": "Include the `locale` field for each user. Defaults to `false`. Please provide a value of type boolean.", "examples": ["true", "false"], "title": "Include Locale", "type": "boolean"}, "limit": {"default": 1, "description": "Maximum number of items to return per page; fewer may be returned if the end of the list is reached. Recommended to set a value (e.g., 100) as Slack may error for large workspaces if omitted. Please provide a value of type integer.", "examples": ["20", "100", "200"], "title": "Limit", "type": "integer"}}}, {"name": "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME", "description": "Deprecated: schedules a message to a slack channel, dm, or private group for a future time. use `schedule message` instead.", "tags": ["SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME"], "status": false, "display_name": "Schedule Message In Chat", "display_description": "Deprecated: schedules a message to a slack channel, dm, or private group for a future time. use `schedule message` instead.", "readonly": true, "args": {"as_user": {"default": null, "description": "Post as the authenticated user, not a bot. Defaults to false. See Slack's `chat.postMessage` docs for authorship. Please provide a value of type boolean.", "examples": [], "title": "As User", "type": "boolean"}, "attachments": {"default": null, "description": "JSON array of structured attachments as a URL-encoded string for rich content. Required if `text` and `blocks` are not provided. Please provide a value of type string.", "examples": ["[{\"color\": \"good\", \"text\": \"Yay! You did it!\", \"fields\": [{\"title\": \"Priority\", \"value\": \"High\", \"short\": false}]}]"], "title": "Attachments", "type": "string"}, "blocks": {"default": null, "description": "**DEPRECATED**: Use `markdown_text` field instead. JSON array of structured blocks as a URL-encoded string for message layout and design. Required if `text` and `attachments` are not provided. Please provide a value of type string.", "examples": ["[{\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"New Paid Time Off request from <example.com|Fred Enriquez>\"}}]"], "title": "Blocks", "type": "string"}, "channel": {"default": null, "description": "Channel, private group, or DM channel ID (e.g., C1234567890) or name (e.g., #general) to send the message to. Please provide a value of type string.", "examples": ["C1234567890", "#general", "U1234567890"], "title": "Channel", "type": "string"}, "link_names": {"default": null, "description": "Pass true to automatically link channel names (e.g., #general) and usernames (e.g., @user). Please provide a value of type boolean.", "examples": [], "title": "Link Names", "type": "boolean"}, "markdown_text": {"default": null, "description": "**PREFERRED**: Write your scheduled message in markdown for nicely formatted display. Supports headers (#), bold (**text**), italic (*text*), strikethrough (~~text~~), code (```), links ([text](url)), quotes (>), and dividers (---). Your message will be posted with beautiful formatting. Please provide a value of type string.", "examples": ["# Scheduled Reminder\n\nDon't forget about the **team meeting** tomorrow at *2 PM*!\n\n```\nZoom: https://zoom.us/meeting-id\n```", "## Weekly Report\n\n- **Tasks completed**: 12\n- *In progress*: 3\n- ~~Blocked~~: **Resolved**\n\n---\n\n**Due**: End of week"], "title": "Markdown Text", "type": "string"}, "parse": {"default": null, "description": "Message text treatment: `full` for special formatting, `none` otherwise (default). See Slack's `chat.postMessage` docs for options. Please provide a value of type string.", "examples": ["none", "full"], "title": "Parse", "type": "string"}, "post_at": {"default": null, "description": "Unix EPOCH timestamp (integer seconds since 1970-01-01 00:00:00 UTC) for the future message send time. Please provide a value of type string.", "examples": ["1678886400"], "title": "Post At", "type": "string"}, "reply_broadcast": {"default": null, "description": "With `thread_ts`, makes reply visible to all in channel, not just thread members. Defaults to `false`. Please provide a value of type boolean.", "examples": [], "title": "Reply Broadcast", "type": "boolean"}, "text": {"default": null, "description": "This sends raw text only, use markdown_text field for formatting. Primary text of the message; formatting with `mrkdwn` applies. Required if `blocks` and `attachments` are not provided. Please provide a value of type string.", "examples": ["Hello, world!"], "title": "Text", "type": "string"}, "thread_ts": {"default": null, "description": "Timestamp of the parent message for the scheduled message to be a thread reply. Must be float seconds (e.g., `1234567890.123456`). Please provide a value of type string.", "examples": ["1405894322.002768"], "title": "Thread Ts", "type": "string"}, "unfurl_links": {"default": null, "description": "Pass false to disable automatic link unfurling. Defaults to true. Please provide a value of type boolean.", "examples": [], "title": "Unfurl Links", "type": "boolean"}, "unfurl_media": {"default": null, "description": "Pass false to disable automatic media unfurling. Defaults to true. Please provide a value of type boolean.", "examples": [], "title": "Unfurl Media", "type": "boolean"}}}, {"name": "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY", "description": "Deprecated: searches messages in a slack workspace using a query with optional modifiers. use `search messages` instead.", "tags": ["SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY"], "status": true, "display_name": "Search Messages Endpoint", "display_description": "Deprecated: searches messages in a slack workspace using a query with optional modifiers. use `search messages` instead.", "readonly": true, "args": {"count": {"default": 1, "description": "Number of messages to return per page. Maximum value is 100. Please provide a value of type integer.", "examples": [20, 50, 100], "title": "Count", "type": "integer"}, "highlight": {"default": null, "description": "Enable highlighting of search terms in results. Please provide a value of type boolean.", "examples": [true, false], "title": "Highlight", "type": "boolean"}, "page": {"default": null, "description": "Page number of results to return. Please provide a value of type integer.", "examples": [1, 2, 3], "title": "Page", "type": "integer"}, "query": {"description": "Search query, supporting modifiers like `in:#channel`, `from:@user`, `has::star:`, or `before:YYYY-MM-DD`. Please provide a value of type string. This parameter is required.", "examples": ["product launch plan", "weekly update in:#project-alpha", "bug report from:@jane has::bug:", "meeting notes before:2024-07-20"], "title": "Query", "type": "string"}, "sort": {"default": null, "description": "Sort results by `score` (relevance) or `timestamp` (chronological). Please provide a value of type string.", "examples": ["score", "timestamp"], "title": "Sort", "type": "string"}, "sort_dir": {"default": null, "description": "Sort direction: `asc` (ascending) or `desc` (descending). Please provide a value of type string.", "examples": ["asc", "desc"], "title": "Sort Dir", "type": "string"}}}, {"name": "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL", "description": "Deprecated: posts a message to a slack channel, direct message, or private group. use `send message` instead.", "tags": ["SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL"], "status": true, "display_name": "Post Message To Channel", "display_description": "Deprecated: posts a message to a slack channel, direct message, or private group. use `send message` instead.", "readonly": true, "args": {"as_user": {"default": null, "description": "Post as the authenticated user instead of as a bot. Defaults to `false`. If `true`, `username`, `icon_emoji`, and `icon_url` are ignored. If `false`, the message is posted as a bot, allowing appearance customization. Please provide a value of type boolean.", "examples": [], "title": "As User", "type": "boolean"}, "attachments": {"default": null, "description": "URL-encoded JSON array of message attachments, a legacy method for rich content. See Slack API documentation for structure. Please provide a value of type string.", "examples": ["%5B%7B%22fallback%22%3A%20%22Required%20plain-text%20summary%20of%20the%20attachment.%22%2C%20%22color%22%3A%20%22%2336a64f%22%2C%20%22pretext%22%3A%20%22Optional%20text%20that%20appears%20above%20the%20attachment%20block%22%2C%20%22author_name%22%3A%20%22Bobby%20Tables%22%2C%20%22title%22%3A%20%22Slack%20API%20Documentation%22%2C%20%22title_link%22%3A%20%22https%3A%2F%2Fapi.slack.com%2F%22%2C%20%22text%22%3A%20%22Optional%20text%20that%20appears%20within%20the%20attachment%22%7D%5D"], "title": "Attachments", "type": "string"}, "blocks": {"default": null, "description": "DEPRECATED: Use `markdown_text` field instead. URL-encoded JSON array of layout blocks for rich/interactive messages. See Slack API Block Kit docs for structure. Please provide a value of type string.", "examples": ["%5B%7B%22type%22%3A%20%22section%22%2C%20%22text%22%3A%20%7B%22type%22%3A%20%22mrkdwn%22%2C%20%22text%22%3A%20%22Hello%2C%20world%21%22%7D%7D%5D"], "title": "Blocks", "type": "string"}, "channel": {"description": "ID or name of the channel, private group, or IM channel to send the message to. Please provide a value of type string. This parameter is required.", "examples": ["C1234567890", "general"], "title": "Channel", "type": "string"}, "icon_emoji": {"default": null, "description": "Emoji for bot's icon (e.g., ':robot_face:'). Overrides `icon_url`. Applies if `as_user` is `false`. Please provide a value of type string.", "examples": [":tada:", ":slack:"], "title": "Icon Emoji", "type": "string"}, "icon_url": {"default": null, "description": "Image URL for bot's icon (must be HTTPS). Applies if `as_user` is `false`. Please provide a value of type string.", "examples": ["https://slack.com/img/icons/appDir_2019_01/Tonito64.png"], "title": "Icon Url", "type": "string"}, "link_names": {"default": null, "description": "Automatically hyperlink channel names (e.g., #channel) and usernames (e.g., @user) in message text. Defaults to `false` for bot messages. Please provide a value of type boolean.", "examples": [], "title": "Link Names", "type": "boolean"}, "markdown_text": {"default": null, "description": "PREFERRED: Write your message in markdown for nicely formatted display. Supports: headers (# ## ###), bold (**text** or __text__), italic (*text* or _text_), strikethrough (~~text~~), inline code (`code`), code blocks (```), links ([text](url)), block quotes (>), lists (- item, 1. item), dividers (--- or ***), context blocks (:::context with images), and section buttons (:::section-button). IMPORTANT: Use \\n for line breaks (e.g., 'Line 1\\nLine 2'), not actual newlines. USER MENTIONS: To tag users, use their user ID with <@USER_ID> format (e.g., <@U1234567890>), not username. . Please provide a value of type string.", "examples": ["# Status Update\n\nSystem is **running smoothly** with *excellent* performance.\n\n```bash\nkubectl get pods\n```\n\n> All services operational \u2705", "## Daily Report\n\n- **Deployments**: 5 successful\n- *Issues*: 0 critical\n- ~~Maintenance~~: **Completed**\n\n---\n\n**Next**: Monitor for 24h"], "title": "Markdown Text", "type": "string"}, "mrkdwn": {"default": null, "description": "Disable Slack's markdown for `text` field if `false`. Default `true` (allows *bold*, _italic_, etc.). Please provide a value of type boolean.", "examples": [], "title": "Mrkdwn", "type": "boolean"}, "parse": {"default": null, "description": "Message text parsing behavior. Default `none` (no special parsing). `full` parses as user-typed (links @mentions, #channels). See Slack API docs for details. Please provide a value of type string.", "examples": ["none", "full"], "title": "Parse", "type": "string"}, "reply_broadcast": {"default": null, "description": "If `true` for a threaded reply, also posts to main channel. Defaults to `false`. Please provide a value of type boolean.", "examples": [], "title": "Reply Broadcast", "type": "boolean"}, "text": {"default": null, "description": "This sends raw text only, use markdown_text field for formatting. Primary textual content. Recommended fallback if using `blocks` or `attachments`. Supports mrkdwn unless `mrkdwn` is `false`. Please provide a value of type string.", "examples": ["Hello from your friendly bot!", "Reminder: Team meeting at 3 PM today."], "title": "Text", "type": "string"}, "thread_ts": {"default": null, "description": "Timestamp (`ts`) of an existing message to make this a threaded reply. Use `ts` of the parent message, not another reply. Example: '1476746824.000004'. Please provide a value of type string.", "examples": ["1618033790.001500"], "title": "Thread Ts", "type": "string"}, "unfurl_links": {"default": null, "description": "Enable unfurling of text-based URLs. Defaults `false` for bots, `true` if `as_user` is `true`. Please provide a value of type boolean.", "examples": [], "title": "Unfurl Links", "type": "boolean"}, "unfurl_media": {"default": null, "description": "Disable unfurling of media content from URLs if `false`. Defaults to `true`. Please provide a value of type boolean.", "examples": [], "title": "Unfurl Media", "type": "boolean"}, "username": {"default": null, "description": "Bot's name in Slack (max 80 chars). Applies if `as_user` is `false`. Please provide a value of type string.", "examples": ["MyBot", "AlertBot"], "title": "Username", "type": "string"}}}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "description": "Slack API", "icon": "Slack", "base_classes": ["DataFrame"], "display_name": "Slack", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "auth_link", "action", "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_limit", "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_cursor", "SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION_include_locale", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_as_user", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_attachments", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_blocks", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_channel", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_emoji", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_icon_url", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_link_names", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_mrkdwn", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_parse", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_reply_broadcast", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_text", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_thread_ts", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_links", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_unfurl_media", "SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL_username", "SLACK_UPDATES_A_SLACK_MESSAGE_as_user", "SLACK_UPDATES_A_SLACK_MESSAGE_attachments", "SLACK_UPDATES_A_SLACK_MESSAGE_blocks", "SLACK_UPDATES_A_SLACK_MESSAGE_channel", "SLACK_UPDATES_A_SLACK_MESSAGE_link_names", "SLACK_UPDATES_A_SLACK_MESSAGE_parse", "SLACK_UPDATES_A_SLACK_MESSAGE_text", "SLACK_UPDATES_A_SLACK_MESSAGE_ts", "SLACK_FETCH_CONVERSATION_HISTORY_channel", "SLACK_FETCH_CONVERSATION_HISTORY_latest", "SLACK_FETCH_CONVERSATION_HISTORY_oldest", "SLACK_FETCH_CONVERSATION_HISTORY_inclusive", "SLACK_FETCH_CONVERSATION_HISTORY_limit", "SLACK_FETCH_CONVERSATION_HISTORY_cursor", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_as_user", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_attachments", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_blocks", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_channel", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_link_names", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_parse", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_post_at", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_reply_broadcast", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_text", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_thread_ts", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_links", "SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME_unfurl_media", "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_exclude_archived", "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_types", "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_limit", "SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS_cursor", "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_count", "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_highlight", "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_page", "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_query", "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort", "SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY_sort_dir", "SLACK_CREATE_A_REMINDER_text", "SLACK_CREATE_A_REMINDER_time", "SLACK_CREATE_A_REMINDER_user"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": true, "category": "composio", "key": "ComposioSlackAPIComponent", "score": 7.568328950209746e-06, "last_updated": "2025-08-13T20:45:01.747Z"}, "showNode": true, "type": "ComposioSlackAPIComponent", "id": "ComposioSlackAPIComponent-VsTtD"}, "selected": false, "measured": {"width": 320, "height": 311}, "dragging": false}], "edges": [{"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "ChatInput", "id": "ChatInput-4LOIm", "name": "message", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_value", "id": "Agent-JwqKh", "inputTypes": ["Message"], "type": "str"}}, "id": "reactflow__edge-ChatInput-4LOIm{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-4LOIm\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-JwqKh{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "source": "ChatInput-4LOIm", "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-4LOIm\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-JwqKh", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"}, {"animated": false, "className": "", "data": {"sourceHandle": {"dataType": "Agent", "id": "Agent-JwqKh", "name": "response", "output_types": ["Message"]}, "targetHandle": {"fieldName": "input_value", "id": "ChatOutput-tbuFc", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}}, "id": "reactflow__edge-Agent-JwqKh{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-tbuFc{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-tbuFc\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "source": "Agent-JwqKh", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-tbuFc", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-tbuFc\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"}, {"source": "GmailAPI-C03Hz", "sourceHandle": "{\u0153dataType\u0153:\u0153GmailAPI\u0153,\u0153id\u0153:\u0153GmailAPI-C03Hz\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-JwqKh", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-JwqKh", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "GmailAPI", "id": "GmailAPI-C03Hz", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__GmailAPI-C03Hz{\u0153dataType\u0153:\u0153GmailAPI\u0153,\u0153id\u0153:\u0153GmailAPI-C03Hz\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-JwqKh{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false}, {"source": "ComposioSlackAPIComponent-VsTtD", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioSlackAPIComponent\u0153,\u0153id\u0153:\u0153ComposioSlackAPIComponent-VsTtD\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-JwqKh", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-JwqKh", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioSlackAPIComponent", "id": "ComposioSlackAPIComponent-VsTtD", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioSlackAPIComponent-VsTtD{\u0153dataType\u0153:\u0153ComposioSlackAPIComponent\u0153,\u0153id\u0153:\u0153ComposioSlackAPIComponent-VsTtD\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-JwqKh{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-JwqKh\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false}], "viewport": {"x": 212.91403525197478, "y": 284.0220283622106, "zoom": 0.4255549769270343}}, "is_component": false, "updated_at": "2025-08-13T20:45:05+00:00", "webhook": false, "endpoint_name": null, "tags": [], "locked": false, "mcp_enabled": true, "action_name": null, "action_description": null, "access_type": "PRIVATE", "id": "7c0021c2-de53-4d1d-aeab-1a839d377c23", "user_id": "90327a89-4044-4f8e-a468-70a709aef9eb", "folder_id": "62f5c291-a7c1-417e-b746-41549658e4ed"}