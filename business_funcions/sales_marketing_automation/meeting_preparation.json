{"name": "Meeting Preparation", "description": "Sculpting Language with Precision.", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"nodes": [{"id": "ComposioGoogleCalendarAPIComponent-SOacj", "type": "genericNode", "position": {"x": 248.53293413173657, "y": 362.9610778443114}, "data": {"node": {"template": {"_type": "Component", "GOOGLECALENDAR_CREATE_EVENT_attendees": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_attendees", "value": "", "display_name": "Attendees", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "List of attendee emails (strings).", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The ID of the Google Calendar. `primary` for interacting with the primary calendar.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room", "value": false, "display_name": "Create Meeting Room", "advanced": true, "dynamic": false, "info": "If true, a Google Meet link is created and added to the event.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_CREATE_EVENT_description": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_description", "value": "", "display_name": "Description", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Description of the event. Can contain HTML. Optional.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_eventType": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_eventType", "value": "default", "display_name": "Event Type", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Type of the event, immutable post-creation. Currently, only 'default'", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour", "value": 0, "display_name": "Event Duration Hour", "advanced": true, "dynamic": false, "info": "Number of hours (0-24).", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes", "value": 30, "display_name": "Event Duration Minutes", "advanced": true, "dynamic": false, "info": "Number of minutes (0-59).", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers", "value": false, "display_name": "Guests Can Invite Others", "advanced": true, "dynamic": false, "info": "Whether attendees other than the organizer can invite others to the event.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests", "value": false, "display_name": "Guests Can See Other Guests", "advanced": true, "dynamic": false, "info": "Whether attendees other than the organizer can see who the event's attendees are.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify", "value": false, "display_name": "Guests Can Modify", "advanced": true, "dynamic": false, "info": "If True, guests can modify the event.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_CREATE_EVENT_location": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_location", "value": "", "display_name": "Location", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Geographic location of the event as free-form text.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_recurrence": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_recurrence", "value": "", "display_name": "Recurrence", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_send_updates": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_send_updates", "value": false, "display_name": "Send Updates", "advanced": true, "dynamic": false, "info": "Defaults to True. Whether to send updates to the attendees.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_CREATE_EVENT_start_datetime": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_start_datetime", "value": "", "display_name": "Start Datetime", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_summary": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_summary", "value": "", "display_name": "Summary/Title", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Summary (title) of the event.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_timezone": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_timezone", "value": "", "display_name": "Timezone", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_transparency": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_transparency", "value": "opaque", "display_name": "Event Transparency", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "'opaque' (busy) or 'transparent' (available).", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_CREATE_EVENT_visibility": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_CREATE_EVENT_visibility", "value": "default", "display_name": "Event Visibility", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_DELETE_EVENT_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_DELETE_EVENT_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "ID of the Google Calendar", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_DELETE_EVENT_event_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_DELETE_EVENT_event_id", "value": "", "display_name": "Event Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "ID of the event to be deleted", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary", "value": "", "display_name": "Summary/Title", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Title of the calendar to be duplicated.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_event_types": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_event_types", "value": "", "display_name": "Event Types", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_max_results": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_max_results", "value": 10, "display_name": "Max Results", "advanced": false, "dynamic": false, "info": "Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_FIND_EVENT_order_by": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_order_by", "value": "", "display_name": "Order By", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_page_token": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_page_token", "value": "", "display_name": "Page Token", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Token specifying which result page to return. Optional.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_query": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_query", "value": "", "display_name": "Query", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_show_deleted": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_show_deleted", "value": false, "display_name": "Show Deleted", "advanced": true, "dynamic": false, "info": "Whether to include deleted events (with status equals 'cancelled') in the result.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_FIND_EVENT_single_events": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_single_events", "value": true, "display_name": "Single Events", "advanced": true, "dynamic": false, "info": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_FIND_EVENT_timeMax": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_timeMax", "value": "", "display_name": "Timemax", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_timeMin": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_timeMin", "value": "", "display_name": "Timemin", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_EVENT_updated_min": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_EVENT_updated_min", "value": "", "display_name": "Updated Min", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max", "value": 50, "display_name": "Calendar Expansion Max", "advanced": true, "dynamic": false, "info": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max", "value": 100, "display_name": "Group Expansion Max", "advanced": true, "dynamic": false, "info": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_FIND_FREE_SLOTS_items": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_items", "value": "", "display_name": "Items", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "List of calendars ids for which to fetch", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max", "value": "", "display_name": "Time Max", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min", "value": "", "display_name": "Time Min", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone", "value": "UTC", "display_name": "Timezone", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Time zone used in the response. Optional. The default is UTC.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_GET_CALENDAR_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_GET_CALENDAR_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The ID of the Google Calendar that needs to be fetched. Default is 'primary'.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone", "value": 0, "display_name": "Timezone", "advanced": true, "dynamic": false, "info": "The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_LIST_CALENDARS_max_results": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_LIST_CALENDARS_max_results", "value": 10, "display_name": "Max Results", "advanced": false, "dynamic": false, "info": "Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_LIST_CALENDARS_min_access_role": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_LIST_CALENDARS_min_access_role", "value": "", "display_name": "Min Access Role", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_LIST_CALENDARS_page_token": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_LIST_CALENDARS_page_token", "value": "", "display_name": "Page Token", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Token specifying which result page to return.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_LIST_CALENDARS_show_deleted": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_LIST_CALENDARS_show_deleted", "value": false, "display_name": "Show Deleted", "advanced": true, "dynamic": false, "info": "Whether to include deleted calendar list entries in the result.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_LIST_CALENDARS_show_hidden": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_LIST_CALENDARS_show_hidden", "value": false, "display_name": "Show Hidden", "advanced": true, "dynamic": false, "info": "Whether to show hidden entries.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_LIST_CALENDARS_sync_token": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_LIST_CALENDARS_sync_token", "value": "", "display_name": "Sync Token", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id", "value": "", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The ID of the Google Calendar that needs to be updated.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_PATCH_CALENDAR_description": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_PATCH_CALENDAR_description", "value": "", "display_name": "Description", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Description of the calendar. Optional.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_PATCH_CALENDAR_location": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_PATCH_CALENDAR_location", "value": "", "display_name": "Location", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Geographic location of the calendar as free-form text.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_PATCH_CALENDAR_summary": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_PATCH_CALENDAR_summary", "value": "", "display_name": "Title/Summary", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_PATCH_CALENDAR_timezone": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_PATCH_CALENDAR_timezone", "value": "", "display_name": "Timezone", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_QUICK_ADD_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_QUICK_ADD_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_QUICK_ADD_send_updates": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_QUICK_ADD_send_updates", "value": "none", "display_name": "Send Updates", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_QUICK_ADD_text": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_QUICK_ADD_text", "value": "", "display_name": "Text", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The text describing the event to be created.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email", "value": "", "display_name": "Attendee Email", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Email address of the attendee to be removed", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "ID of the Google Calendar", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id", "value": "", "display_name": "Event Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "ID of the event", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_attendees": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_attendees", "value": "", "display_name": "Attendees", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "List of attendee emails (strings).", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_calendar_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_calendar_id", "value": "primary", "display_name": "Calendar Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "ID of the Google Calendar", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room", "value": false, "display_name": "Create Meeting Room", "advanced": true, "dynamic": false, "info": "If true, a Google Meet link is created and added to the event.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_UPDATE_EVENT_description": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_description", "value": "", "display_name": "Description", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Description of the event. Can contain HTML. Optional.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_eventType": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_eventType", "value": "default", "display_name": "EventType", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour", "value": 0, "display_name": "Event Duration Hour", "advanced": true, "dynamic": false, "info": "Number of hours (0-24).", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes", "value": 30, "display_name": "Event Duration Minutes", "advanced": true, "dynamic": false, "info": "Number of minutes (0-59).", "title_case": false, "type": "int", "_input_type": "IntInput"}, "GOOGLECALENDAR_UPDATE_EVENT_event_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_event_id", "value": "", "display_name": "Event Id", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "ID of the event to be updated", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers", "value": false, "display_name": "Guests Can Invite Others", "advanced": true, "dynamic": false, "info": "Whether attendees other than the organizer can invite others to the event.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests", "value": false, "display_name": "Guests Can See Other Guests", "advanced": true, "dynamic": false, "info": "Whether attendees other than the organizer can see who the event's attendees are.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify", "value": false, "display_name": "Guests Can Modify", "advanced": true, "dynamic": false, "info": "If True, guests can modify the event.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_UPDATE_EVENT_location": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_location", "value": "", "display_name": "Location", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Geographic location of the event as free-form text.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_recurrence": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_recurrence", "value": "", "display_name": "Recurrence", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_send_updates": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_send_updates", "value": false, "display_name": "Send Updates", "advanced": true, "dynamic": false, "info": "Defaults to True. Whether to send updates to the attendees.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "GOOGLECALENDAR_UPDATE_EVENT_start_datetime": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_start_datetime", "value": "", "display_name": "Start Datetime", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_summary": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_summary", "value": "", "display_name": "Summary/Title", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "Summary (title) of the event.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_timezone": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_timezone", "value": "", "display_name": "Timezone", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_transparency": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_transparency", "value": "opaque", "display_name": "Event Transparency", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "'opaque' (busy) or 'transparent' (available).", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "GOOGLECALENDAR_UPDATE_EVENT_visibility": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": false, "name": "GOOGLECALENDAR_UPDATE_EVENT_visibility", "value": "default", "display_name": "Event Visibility", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "action": {"tool_mode": false, "trace_as_metadata": true, "helper_text": "Please connect before selecting actions.", "helper_text_metadata": {"variant": "destructive"}, "search_category": [], "options": [], "limit": 1, "required": false, "placeholder": "Select action", "show": false, "name": "action", "value": "disabled", "display_name": "Action", "advanced": false, "dynamic": false, "info": "", "real_time_refresh": true, "title_case": false, "type": "sortableList", "_input_type": "SortableListInput"}, "api_key": {"load_from_db": false, "required": true, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "Composio API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "auth_link": {"trace_as_metadata": true, "auth_tooltip": "Please provide a valid Composio API Key.", "required": false, "placeholder": "", "show": false, "name": "auth_link", "value": "", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "auth", "_input_type": "AuthInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGoogleCalendarAPIComponent(ComposioBaseComponent):\n    \"\"\"Google Calendar API component for interacting with Google Calendar services.\"\"\"\n\n    display_name: str = \"Google Calendar\"\n    description: str = \"Google Calendar API\"\n    icon = \"Googlecalendar\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"googlecalendar\"\n\n    _actions_data: dict = {\n        \"GOOGLECALENDAR_UPDATE_EVENT\": {\n            \"display_name\": \"Update Google Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_UPDATE_EVENT_description\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_location\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_REMOVE_ATTENDEE\": {\n            \"display_name\": \"Remove Attendee From Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\": {\n            \"display_name\": \"Get Current Date And Time\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\"],\n        },\n        \"GOOGLECALENDAR_QUICK_ADD\": {\n            \"display_name\": \"Quick Add Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n                \"GOOGLECALENDAR_QUICK_ADD_text\",\n                \"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            ],\n        },\n        \"GOOGLECALENDAR_LIST_CALENDARS\": {\n            \"display_name\": \"List Google Calendars\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_EVENT\": {\n            \"display_name\": \"Find Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_FIND_EVENT_query\",\n                \"GOOGLECALENDAR_FIND_EVENT_max_results\",\n                \"GOOGLECALENDAR_FIND_EVENT_order_by\",\n                \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n                \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n                \"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n                \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n                \"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_CREATE_EVENT\": {\n            \"display_name\": \"Create Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_CREATE_EVENT_description\",\n                \"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_CREATE_EVENT_location\",\n                \"GOOGLECALENDAR_CREATE_EVENT_summary\",\n                \"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS\": {\n            \"display_name\": \"Find Free Slots\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            ],\n        },\n        \"GOOGLECALENDAR_PATCH_CALENDAR\": {\n            \"display_name\": \"Patch Calendar\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CALENDAR\": {\n            \"display_name\": \"Fetch Google Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\"],\n        },\n        \"GOOGLECALENDAR_DELETE_EVENT\": {\n            \"display_name\": \"Delete Event\",\n            \"action_fields\": [\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\", \"GOOGLECALENDAR_DELETE_EVENT_event_id\"],\n        },\n        \"GOOGLECALENDAR_DUPLICATE_CALENDAR\": {\n            \"display_name\": \"Duplicate Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\"],\n        },\n    }\n\n    _list_variables = {\n        \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n        \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n        \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n        \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n        \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        IntInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n            display_name=\"Min Access Role\",\n            info=\"The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted calendar list entries in the result.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n            display_name=\"Show Hidden\",\n            info=\"Whether to show hidden entries.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            display_name=\"Sync Token\",\n            info=\"Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_query\",\n            display_name=\"Query\",\n            info=\"Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.\",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_order_by\",\n            display_name=\"Order By\",\n            info=\"The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted events (with status equals 'cancelled') in the result.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_single_events\",\n            display_name=\"Single Events\",\n            info=\"Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.\",  # noqa: E501\n            show=False,\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n            display_name=\"Timemax\",\n            info=\"Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n            display_name=\"Timemin\",\n            info=\"Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n            display_name=\"Updated Min\",\n            info=\"Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_event_types\",\n            display_name=\"Event Types\",\n            info=\"List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Title of the calendar to be duplicated.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            display_name=\"Attendee Email\",\n            info=\"Email address of the attendee to be removed\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be fetched. Default is 'primary'.\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n            display_name=\"Event Type\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default'\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar. `primary` for interacting with the primary calendar.\",\n            show=False,\n            value=\"primary\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be deleted\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n            display_name=\"Time Min\",\n            info=\"The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n            display_name=\"Time Max\",\n            info=\"The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n            display_name=\"Timezone\",\n            info=\"Time zone used in the response. Optional. The default is UTC.\",\n            show=False,\n            value=\"UTC\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n            display_name=\"Group Expansion Max\",\n            info=\"Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.\",  # noqa: E501\n            show=False,\n            value=100,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n            display_name=\"Calendar Expansion Max\",\n            info=\"Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.\",  # noqa: E501\n            show=False,\n            value=50,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            display_name=\"Items\",\n            info=\"List of calendars ids for which to fetch\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_text\",\n            display_name=\"Text\",\n            info=\"The text describing the event to be created.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'\",  # noqa: E501\n            show=False,\n            value=\"none\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n            display_name=\"Description\",\n            info=\"Description of the calendar. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the calendar as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n            display_name=\"Title/Summary\",\n            info=\"Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.\",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            display_name=\"Timezone\",\n            info=\"The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\",\n            display_name=\"Timezone\",\n            info=\"The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.\",  # noqa: E501\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n            display_name=\"EventType\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.\",  # noqa: E501\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be updated\",\n            show=False,\n            required=True,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in self._list_variables and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"error\", {})\n                return {\"error\": message_str}\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            if action_key == \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\":\n                return result_data\n            return result_data[next(iter(result_data))]\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "entity_id": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "entity_id", "value": "default", "display_name": "Entity ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "Error loading actions", "show": true, "name": "tools_metadata", "value": [], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "description": "Google Calendar API", "icon": "Googlecalendar", "base_classes": ["DataFrame"], "display_name": "Google Calendar", "documentation": "https://docs.composio.dev", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": false, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["entity_id", "api_key", "auth_link", "action", "GOOGLECALENDAR_LIST_CALENDARS_max_results", "GOOGLECALENDAR_LIST_CALENDARS_min_access_role", "GOOGLECALENDAR_LIST_CALENDARS_page_token", "GOOGLECALENDAR_LIST_CALENDARS_show_deleted", "GOOGLECALENDAR_LIST_CALENDARS_show_hidden", "GOOGLECALENDAR_LIST_CALENDARS_sync_token", "GOOGLECALENDAR_FIND_EVENT_calendar_id", "GOOGLECALENDAR_FIND_EVENT_query", "GOOGLECALENDAR_FIND_EVENT_max_results", "GOOGLECALENDAR_FIND_EVENT_order_by", "GOOGLECALENDAR_FIND_EVENT_show_deleted", "GOOGLECALENDAR_FIND_EVENT_single_events", "GOOGLECALENDAR_FIND_EVENT_timeMax", "GOOGLECALENDAR_FIND_EVENT_timeMin", "GOOGLECALENDAR_FIND_EVENT_updated_min", "GOOGLECALENDAR_FIND_EVENT_event_types", "GOOGLECALENDAR_FIND_EVENT_page_token", "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary", "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id", "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id", "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email", "GOOGLECALENDAR_GET_CALENDAR_calendar_id", "GOOGLECALENDAR_CREATE_EVENT_description", "GOOGLECALENDAR_CREATE_EVENT_eventType", "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room", "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests", "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers", "GOOGLECALENDAR_CREATE_EVENT_location", "GOOGLECALENDAR_CREATE_EVENT_summary", "GOOGLECALENDAR_CREATE_EVENT_transparency", "GOOGLECALENDAR_CREATE_EVENT_visibility", "GOOGLECALENDAR_CREATE_EVENT_timezone", "GOOGLECALENDAR_CREATE_EVENT_recurrence", "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify", "GOOGLECALENDAR_CREATE_EVENT_attendees", "GOOGLECALENDAR_CREATE_EVENT_send_updates", "GOOGLECALENDAR_CREATE_EVENT_start_datetime", "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour", "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes", "GOOGLECALENDAR_CREATE_EVENT_calendar_id", "GOOGLECALENDAR_DELETE_EVENT_calendar_id", "GOOGLECALENDAR_DELETE_EVENT_event_id", "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min", "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max", "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone", "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max", "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max", "GOOGLECALENDAR_FIND_FREE_SLOTS_items", "GOOGLECALENDAR_QUICK_ADD_calendar_id", "GOOGLECALENDAR_QUICK_ADD_text", "GOOGLECALENDAR_QUICK_ADD_send_updates", "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id", "GOOGLECALENDAR_PATCH_CALENDAR_description", "GOOGLECALENDAR_PATCH_CALENDAR_location", "GOOGLECALENDAR_PATCH_CALENDAR_summary", "GOOGLECALENDAR_PATCH_CALENDAR_timezone", "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone", "GOOGLECALENDAR_UPDATE_EVENT_description", "GOOGLECALENDAR_UPDATE_EVENT_eventType", "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room", "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests", "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers", "GOOGLECALENDAR_UPDATE_EVENT_location", "GOOGLECALENDAR_UPDATE_EVENT_summary", "GOOGLECALENDAR_UPDATE_EVENT_transparency", "GOOGLECALENDAR_UPDATE_EVENT_visibility", "GOOGLECALENDAR_UPDATE_EVENT_timezone", "GOOGLECALENDAR_UPDATE_EVENT_recurrence", "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify", "GOOGLECALENDAR_UPDATE_EVENT_attendees", "GOOGLECALENDAR_UPDATE_EVENT_send_updates", "GOOGLECALENDAR_UPDATE_EVENT_start_datetime", "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour", "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes", "GOOGLECALENDAR_UPDATE_EVENT_calendar_id", "GOOGLECALENDAR_UPDATE_EVENT_event_id"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": true, "category": "composio", "key": "ComposioGoogleCalendarAPIComponent", "score": 0.03289318164829356, "last_updated": "2025-08-12T19:55:09.125Z", "lf_version": "1.5.0.post1"}, "showNode": true, "type": "ComposioGoogleCalendarAPIComponent", "id": "ComposioGoogleCalendarAPIComponent-SOacj"}, "selected": false, "measured": {"width": 320, "height": 287}, "dragging": false}, {"id": "Agent-T9MN9", "type": "genericNode", "position": {"x": 747, "y": 362}, "data": {"node": {"template": {"_type": "Component", "tools": {"trace_as_metadata": true, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools", "value": "", "display_name": "Tools", "advanced": false, "input_types": ["Tool"], "dynamic": false, "info": "These are the tools that the agent can use to help with tasks.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "add_current_date_tool": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "add_current_date_tool", "value": true, "display_name": "Current Date", "advanced": true, "dynamic": false, "info": "If true, will add a tool to the agent that returns the current date.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "agent_description": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "agent_description", "value": "A helpful assistant with access to the following tools:", "display_name": "Agent Description [Deprecated]", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "agent_llm": {"tool_mode": false, "trace_as_metadata": true, "options": ["Anthropic", "Google Generative AI", "Groq", "OpenAI", "Custom"], "options_metadata": [{"icon": "Anthropic"}, {"icon": "GoogleGenerativeAI"}, {"icon": "Groq"}, {"icon": "OpenAI"}, {"icon": "brain"}], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "agent_llm", "value": "OpenAI", "display_name": "Model Provider", "advanced": false, "input_types": [], "dynamic": false, "info": "The provider of the language model that the agent will use to generate responses.", "real_time_refresh": true, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "api_key": {"load_from_db": true, "required": false, "placeholder": "", "show": true, "name": "api_key", "value": null, "display_name": "OpenAI API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "The OpenAI API Key to use for the OpenAI model.", "real_time_refresh": true, "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "handle_parsing_errors": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "handle_parsing_errors", "value": true, "display_name": "Handle Parse Errors", "advanced": true, "dynamic": false, "info": "Should the Agent fix errors when reading user input for better processing?", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "input_value": {"trace_as_input": true, "tool_mode": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Input", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "The input provided by the user for the agent to process.", "title_case": false, "type": "str", "_input_type": "MessageInput"}, "json_mode": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "json_mode", "value": false, "display_name": "JSON Mode", "advanced": true, "dynamic": false, "info": "If True, it will output JSON regardless of passing a schema.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "max_iterations": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_iterations", "value": 15, "display_name": "Max Iterations", "advanced": true, "dynamic": false, "info": "The maximum number of attempts the agent can make to complete its task before it stops.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_retries": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_retries", "value": 5, "display_name": "Max Retries", "advanced": true, "dynamic": false, "info": "The maximum number of retries to make when generating.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_tokens": {"tool_mode": false, "trace_as_metadata": true, "range_spec": {"step_type": "float", "min": 0, "max": 128000, "step": 0.1}, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_tokens", "value": "", "display_name": "Max Tokens", "advanced": true, "dynamic": false, "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "model_kwargs": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "model_kwargs", "value": {}, "display_name": "Model Kwargs", "advanced": true, "dynamic": false, "info": "Additional keyword arguments to pass to the model.", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "model_name": {"tool_mode": false, "trace_as_metadata": true, "options": ["gpt-4o-mini", "gpt-4o", "gpt-4.1", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4.5-preview", "gpt-4-turbo", "gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo", "o1", "o1-mini", "o1-pro", "o3-mini", "o3", "o3-pro", "o4-mini", "o4-mini-high"], "options_metadata": [], "combobox": true, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "model_name", "value": "gpt-4o-mini", "display_name": "Model Name", "advanced": false, "dynamic": false, "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.", "real_time_refresh": false, "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "n_messages": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "n_messages", "value": 100, "display_name": "Number of Chat History Messages", "advanced": true, "dynamic": false, "info": "Number of chat history messages to retrieve.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "openai_api_base": {"tool_mode": false, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "openai_api_base", "value": "", "display_name": "OpenAI API Base", "advanced": true, "dynamic": false, "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.", "title_case": false, "type": "str", "_input_type": "StrInput"}, "seed": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "seed", "value": 1, "display_name": "Seed", "advanced": true, "dynamic": false, "info": "The seed controls the reproducibility of the job.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "system_prompt": {"tool_mode": false, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "system_prompt", "value": "You are a helpful assistant that can use tools to answer questions and perform tasks.", "display_name": "Agent Instructions", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "temperature": {"tool_mode": false, "min_label": "", "max_label": "", "min_label_icon": "", "max_label_icon": "", "slider_buttons": false, "slider_buttons_options": [], "slider_input": false, "range_spec": {"step_type": "float", "min": 0, "max": 1, "step": 0.01}, "required": false, "placeholder": "", "show": true, "name": "temperature", "value": 0.1, "display_name": "Temperature", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "slider", "_input_type": "SliderInput"}, "timeout": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "timeout", "value": 700, "display_name": "Timeout", "advanced": true, "dynamic": false, "info": "The timeout for requests to OpenAI completion API.", "title_case": false, "type": "int", "_input_type": "IntInput"}, "verbose": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "verbose", "value": true, "display_name": "Verbose", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "bool", "_input_type": "BoolInput"}}, "description": "Define the agent's instructions, then enter a task to complete using tools.", "icon": "bot", "base_classes": ["Message"], "display_name": "Agent", "documentation": "https://docs.langflow.org/agents", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "response", "hidden": false, "display_name": "Response", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["agent_llm", "max_tokens", "model_kwargs", "json_mode", "model_name", "openai_api_base", "api_key", "temperature", "seed", "max_retries", "timeout", "system_prompt", "n_messages", "tools", "input_value", "handle_parsing_errors", "verbose", "max_iterations", "agent_description", "add_current_date_tool"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "lf_version": "1.5.0.post1"}, "showNode": true, "type": "Agent", "id": "Agent-T9MN9"}, "selected": false, "measured": {"width": 320, "height": 591}}, {"id": "Prompt-OeWDJ", "type": "genericNode", "position": {"x": 286.7283263772358, "y": 699.9865516200978}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "template": {"tool_mode": false, "trace_as_input": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "template", "value": "You are an AI assistant specialized in enhancing Google Calendar events with relevant information and summaries.\n\n\ud83c\udfaf **Objective**\n\n* Read today\u2019s events from Google Calendar.\n* For each event, analyze the title and description to understand the meeting topics.\n* If additional context or information is needed, use the **Serp Search API** tool to gather relevant, accurate, and up-to-date details.\n* Generate a short, clear summary of the meeting\u2019s topic(s).\n* Add this summary \u2014 along with any helpful contextual information \u2014 to the event\u2019s description in Google Calendar.\n\n\ud83d\udccc **Guidelines**\n\n* Keep summaries concise (max 3\u20134 sentences) and easy to understand.\n* Only include verified, relevant information.\n* Maintain a professional and neutral tone.\n* Do not remove or overwrite existing event details \u2014 append your summary below them.\n* If the meeting topic is unclear or no useful data is found, note that no additional context is available.\n\n\ud83d\udee0 **Tools Available**\n\n* **Google Calendar**: to retrieve today\u2019s events and update their descriptions.\n* **Serp Search API**: to find relevant context about the meeting topics.\n\n\u26a0\ufe0f **Notes**\n\n* Always ensure the added content is directly related to the meeting topic.\n* Do not include personal opinions or unrelated facts.\n", "display_name": "Template", "advanced": false, "dynamic": false, "info": "", "title_case": false, "type": "prompt", "_input_type": "PromptInput"}, "tool_placeholder": {"tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tool_placeholder", "value": "", "display_name": "Tool Placeholder", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "A placeholder input for tool mode.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Create a prompt template with dynamic variables.", "icon": "prompts", "is_input": null, "is_output": null, "is_composition": null, "base_classes": ["Message"], "name": "", "display_name": "Prompt", "priority": null, "documentation": "", "minimized": false, "custom_fields": {"template": []}, "output_types": [], "full_path": null, "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "prompt", "hidden": false, "display_name": "Prompt Message", "method": "build_prompt", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["template", "tool_placeholder"], "beta": false, "legacy": false, "error": null, "edited": false, "metadata": {}, "tool_mode": false, "lf_version": "1.5.0.post1"}, "showNode": true, "type": "Prompt", "id": "Prompt-OeWDJ"}, "selected": false, "measured": {"width": 320, "height": 283}, "dragging": false}, {"id": "ChatOutput-j5qQO", "type": "genericNode", "position": {"x": 1164, "y": 918}, "data": {"node": {"template": {"_type": "Component", "input_value": {"trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": true, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Inputs", "advanced": false, "input_types": ["Data", "DataFrame", "Message"], "dynamic": false, "info": "Message to be passed as output.", "title_case": false, "type": "other", "_input_type": "HandleInput"}, "background_color": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "background_color", "value": "", "display_name": "Background Color", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The background color of the icon.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "chat_icon": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "chat_icon", "value": "", "display_name": "Icon", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The icon of the message.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "clean_data": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "clean_data", "value": true, "display_name": "Basic Clean Data", "advanced": true, "dynamic": false, "info": "Whether to clean the data", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "data_template": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "data_template", "value": "{text}", "display_name": "Data Template", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "sender": {"tool_mode": false, "trace_as_metadata": true, "options": ["Machine", "User"], "options_metadata": [], "combobox": false, "dialog_inputs": {}, "toggle": false, "required": false, "placeholder": "", "show": true, "name": "sender", "value": "Machine", "display_name": "Sender Type", "advanced": true, "dynamic": false, "info": "Type of sender.", "title_case": false, "type": "str", "_input_type": "DropdownInput"}, "sender_name": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "sender_name", "value": "AI", "display_name": "Sender Name", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "Name of the sender.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "session_id": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "session_id", "value": "", "display_name": "Session ID", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The session ID of the chat. If empty, the current session ID parameter will be used.", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}, "should_store_message": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "should_store_message", "value": true, "display_name": "Store Messages", "advanced": true, "dynamic": false, "info": "Store the message in the history.", "title_case": false, "type": "bool", "_input_type": "BoolInput"}, "text_color": {"tool_mode": false, "trace_as_input": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "text_color", "value": "", "display_name": "Text Color", "advanced": true, "input_types": ["Message"], "dynamic": false, "info": "The text color of the name", "title_case": false, "type": "str", "_input_type": "MessageTextInput"}}, "description": "Display a chat message in the Playground.", "icon": "MessagesSquare", "base_classes": ["Message"], "display_name": "Chat Output", "documentation": "https://docs.langflow.org/components-io#chat-output", "minimized": true, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Message"], "selected": "Message", "name": "message", "display_name": "Output Message", "method": "message_response", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["input_value", "should_store_message", "sender", "sender_name", "session_id", "data_template", "background_color", "chat_icon", "text_color", "clean_data"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": false, "lf_version": "1.5.0.post1"}, "showNode": false, "type": "ChatOutput", "id": "ChatOutput-j5qQO"}, "selected": false, "measured": {"width": 192, "height": 48}, "dragging": false}, {"id": "Serp-rtSOJ", "type": "genericNode", "position": {"x": 268.3428791587437, "y": 61.74856861564322}, "data": {"node": {"template": {"_type": "Component", "code": {"type": "code", "required": true, "placeholder": "", "list": false, "show": true, "multiline": true, "value": "from typing import Any\n\nfrom langchain_community.utilities.serpapi import SerpAPIWrapper\nfrom langchain_core.tools import ToolException\nfrom loguru import logger\nfrom pydantic import BaseModel, Field\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import DictInput, IntInput, MultilineInput, SecretStrInput\nfrom langflow.io import Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.message import Message\n\n\nclass SerpAPISchema(BaseModel):\n    \"\"\"Schema for SerpAPI search parameters.\"\"\"\n\n    query: str = Field(..., description=\"The search query\")\n    params: dict[str, Any] | None = Field(\n        default={\n            \"engine\": \"google\",\n            \"google_domain\": \"google.com\",\n            \"gl\": \"us\",\n            \"hl\": \"en\",\n        },\n        description=\"Additional search parameters\",\n    )\n    max_results: int = Field(5, description=\"Maximum number of results to return\")\n    max_snippet_length: int = Field(100, description=\"Maximum length of each result snippet\")\n\n\nclass SerpComponent(Component):\n    display_name = \"Serp Search API\"\n    description = \"Call Serp Search API with result limiting\"\n    name = \"Serp\"\n    icon = \"SerpSearch\"\n\n    inputs = [\n        SecretStrInput(name=\"serpapi_api_key\", display_name=\"SerpAPI API Key\", required=True),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            tool_mode=True,\n        ),\n        DictInput(name=\"search_params\", display_name=\"Parameters\", advanced=True, is_list=True),\n        IntInput(name=\"max_results\", display_name=\"Max Results\", value=5, advanced=True),\n        IntInput(name=\"max_snippet_length\", display_name=\"Max Snippet Length\", value=100, advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def _build_wrapper(self, params: dict[str, Any] | None = None) -> SerpAPIWrapper:\n        \"\"\"Build a SerpAPIWrapper with the provided parameters.\"\"\"\n        params = params or {}\n        if params:\n            return SerpAPIWrapper(\n                serpapi_api_key=self.serpapi_api_key,\n                params=params,\n            )\n        return SerpAPIWrapper(serpapi_api_key=self.serpapi_api_key)\n\n    def run_model(self) -> list[Data]:\n        return self.fetch_content()\n\n    def fetch_content(self) -> list[Data]:\n        wrapper = self._build_wrapper(self.search_params)\n\n        def search_func(\n            query: str, params: dict[str, Any] | None = None, max_results: int = 5, max_snippet_length: int = 100\n        ) -> list[Data]:\n            try:\n                local_wrapper = wrapper\n                if params:\n                    local_wrapper = self._build_wrapper(params)\n\n                full_results = local_wrapper.results(query)\n                organic_results = full_results.get(\"organic_results\", [])[:max_results]\n\n                limited_results = [\n                    Data(\n                        text=result.get(\"snippet\", \"\"),\n                        data={\n                            \"title\": result.get(\"title\", \"\")[:max_snippet_length],\n                            \"link\": result.get(\"link\", \"\"),\n                            \"snippet\": result.get(\"snippet\", \"\")[:max_snippet_length],\n                        },\n                    )\n                    for result in organic_results\n                ]\n\n            except Exception as e:\n                error_message = f\"Error in SerpAPI search: {e!s}\"\n                logger.debug(error_message)\n                raise ToolException(error_message) from e\n            return limited_results\n\n        results = search_func(\n            self.input_value,\n            params=self.search_params,\n            max_results=self.max_results,\n            max_snippet_length=self.max_snippet_length,\n        )\n        self.status = results\n        return results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = \"\"\n        for item in data:\n            result_string += item.text + \"\\n\"\n        self.status = result_string\n        return Message(text=result_string)\n", "fileTypes": [], "file_path": "", "password": false, "name": "code", "advanced": true, "dynamic": true, "info": "", "load_from_db": false, "title_case": false}, "input_value": {"tool_mode": true, "trace_as_input": true, "multiline": true, "trace_as_metadata": true, "load_from_db": false, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "input_value", "value": "", "display_name": "Input", "advanced": false, "input_types": ["Message"], "dynamic": false, "info": "", "title_case": false, "copy_field": false, "type": "str", "_input_type": "MultilineInput"}, "max_results": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_results", "value": 5, "display_name": "Max Results", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "max_snippet_length": {"tool_mode": false, "trace_as_metadata": true, "list": false, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "max_snippet_length", "value": 100, "display_name": "Max Snippet Length", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "int", "_input_type": "IntInput"}, "search_params": {"tool_mode": false, "trace_as_input": true, "list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "search_params", "value": {}, "display_name": "Parameters", "advanced": true, "dynamic": false, "info": "", "title_case": false, "type": "dict", "_input_type": "DictInput"}, "serpapi_api_key": {"load_from_db": false, "required": true, "placeholder": "", "show": true, "name": "serpapi_api_key", "value": null, "display_name": "SerpAPI API Key", "advanced": false, "input_types": [], "dynamic": false, "info": "", "title_case": false, "password": true, "type": "str", "_input_type": "SecretStrInput"}, "tools_metadata": {"tool_mode": false, "trace_as_metadata": true, "is_list": true, "list_add_label": "Add More", "required": false, "placeholder": "", "show": true, "name": "tools_metadata", "value": [{"name": "fetch_content", "description": "Call Serp Search API with result limiting", "tags": ["fetch_content"], "status": true, "display_name": "fetch_content", "display_description": "Call Serp Search API with result limiting", "readonly": false, "args": {"input_value": {"default": "", "description": "", "title": "Input Value", "type": "string"}}}, {"name": "fetch_content_text", "description": "Call Serp Search API with result limiting", "tags": ["fetch_content_text"], "status": true, "display_name": "fetch_content_text", "display_description": "Call Serp Search API with result limiting", "readonly": false, "args": {"input_value": {"default": "", "description": "", "title": "Input Value", "type": "string"}}}], "display_name": "Actions", "advanced": false, "dynamic": false, "info": "Modify tool names and descriptions to help agents understand when to use each tool.", "real_time_refresh": true, "title_case": false, "type": "tools", "_input_type": "ToolsInput"}}, "description": "Call Serp Search API with result limiting", "icon": "SerpSearch", "base_classes": ["Data", "Message"], "display_name": "Serp Search API", "documentation": "", "minimized": false, "custom_fields": {}, "output_types": [], "pinned": false, "conditional_paths": [], "frozen": false, "outputs": [{"types": ["Tool"], "selected": "Tool", "name": "component_as_tool", "hidden": null, "display_name": "Toolset", "method": "to_toolkit", "value": "__UNDEFINED__", "cache": true, "required_inputs": null, "allows_loop": false, "group_outputs": false, "options": null, "tool_mode": true}], "field_order": ["serpapi_api_key", "input_value", "search_params", "max_results", "max_snippet_length"], "beta": false, "legacy": false, "edited": false, "metadata": {}, "tool_mode": true, "category": "serpapi", "key": "Serp", "score": 5.987019347996571e-06, "last_updated": "2025-08-12T19:51:43.452Z", "lf_version": "1.5.0.post1"}, "showNode": true, "type": "Serp", "id": "Serp-rtSOJ", "selected_output": "data"}, "selected": false, "measured": {"width": 320, "height": 283}, "dragging": false}], "edges": [{"source": "ComposioGoogleCalendarAPIComponent-SOacj", "sourceHandle": "{\u0153dataType\u0153:\u0153ComposioGoogleCalendarAPIComponent\u0153,\u0153id\u0153:\u0153ComposioGoogleCalendarAPIComponent-SOacj\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-T9MN9", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-T9MN9", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "ComposioGoogleCalendarAPIComponent", "id": "ComposioGoogleCalendarAPIComponent-SOacj", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__ComposioGoogleCalendarAPIComponent-SOacj{\u0153dataType\u0153:\u0153ComposioGoogleCalendarAPIComponent\u0153,\u0153id\u0153:\u0153ComposioGoogleCalendarAPIComponent-SOacj\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-T9MN9{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Prompt-OeWDJ", "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-OeWDJ\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "Agent-T9MN9", "targetHandle": "{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "data": {"targetHandle": {"fieldName": "system_prompt", "id": "Agent-T9MN9", "inputTypes": ["Message"], "type": "str"}, "sourceHandle": {"dataType": "Prompt", "id": "Prompt-OeWDJ", "name": "prompt", "output_types": ["Message"]}}, "id": "xy-edge__Prompt-OeWDJ{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-OeWDJ\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-T9MN9{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Agent-T9MN9", "sourceHandle": "{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}", "target": "ChatOutput-j5qQO", "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-j5qQO\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "input_value", "id": "ChatOutput-j5qQO", "inputTypes": ["Data", "DataFrame", "Message"], "type": "other"}, "sourceHandle": {"dataType": "Agent", "id": "Agent-T9MN9", "name": "response", "output_types": ["Message"]}}, "id": "xy-edge__Agent-T9MN9{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-j5qQO{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-j5qQO\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}, {"source": "Serp-rtSOJ", "sourceHandle": "{\u0153dataType\u0153:\u0153Serp\u0153,\u0153id\u0153:\u0153Serp-rtSOJ\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}", "target": "Agent-T9MN9", "targetHandle": "{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "data": {"targetHandle": {"fieldName": "tools", "id": "Agent-T9MN9", "inputTypes": ["Tool"], "type": "other"}, "sourceHandle": {"dataType": "Serp", "id": "Serp-rtSOJ", "name": "component_as_tool", "output_types": ["Tool"]}}, "id": "xy-edge__Serp-rtSOJ{\u0153dataType\u0153:\u0153Serp\u0153,\u0153id\u0153:\u0153Serp-rtSOJ\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-T9MN9{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-T9MN9\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}", "selected": false, "animated": false, "className": ""}], "viewport": {"x": 151.9118867909159, "y": 10.058611528060737, "zoom": 0.490047044697717}}, "is_component": false, "updated_at": "2025-08-12T19:55:14+00:00", "webhook": false, "endpoint_name": null, "tags": [], "locked": false, "mcp_enabled": true, "action_name": null, "action_description": null, "access_type": "PRIVATE", "id": "6a4f689e-e4af-47a2-9ea7-3b7c9cad0a24", "user_id": "90327a89-4044-4f8e-a468-70a709aef9eb", "folder_id": "a9b76bfa-fde3-46d3-8c3f-38cb257b3c1f"}