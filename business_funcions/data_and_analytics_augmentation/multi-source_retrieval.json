{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "BigQueryExecutor",
            "id": "BigQueryExecutor-OqJ2u",
            "name": "query_results",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-hpuHj",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-BigQueryExecutor-OqJ2u{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-OqJ2uœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-hpuHj{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-hpuHjœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "BigQueryExecutor-OqJ2u",
        "sourceHandle": "{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-OqJ2uœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-hpuHj",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-hpuHjœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "BigQueryExecutor",
            "id": "BigQueryExecutor-OZ01S",
            "name": "query_results",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-1dCXv",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-BigQueryExecutor-OZ01S{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-OZ01Sœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-1dCXv{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-1dCXvœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "BigQueryExecutor-OZ01S",
        "sourceHandle": "{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-OZ01Sœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-1dCXv",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-1dCXvœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-qjr3s",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-5cI73",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-qjr3s{œdataTypeœ:œPromptœ,œidœ:œPrompt-qjr3sœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-5cI73{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-5cI73œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-qjr3s",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-qjr3sœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-5cI73",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-5cI73œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CalculatorComponent",
            "id": "CalculatorComponent-fIpls",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-5cI73",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-CalculatorComponent-fIpls{œdataTypeœ:œCalculatorComponentœ,œidœ:œCalculatorComponent-fIplsœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-5cI73{œfieldNameœ:œtoolsœ,œidœ:œAgent-5cI73œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CalculatorComponent-fIpls",
        "sourceHandle": "{œdataTypeœ:œCalculatorComponentœ,œidœ:œCalculatorComponent-fIplsœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-5cI73",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-5cI73œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "BigQueryExecutor",
            "id": "BigQueryExecutor-AZEIj",
            "name": "query_results",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-DoQkB",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-BigQueryExecutor-AZEIj{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-AZEIjœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-DoQkB{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-DoQkBœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "BigQueryExecutor-AZEIj",
        "sourceHandle": "{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-AZEIjœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-DoQkB",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-DoQkBœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "BigQueryExecutor",
            "id": "BigQueryExecutor-R7IfD",
            "name": "query_results",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-Gs0Wf",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-BigQueryExecutor-R7IfD{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-R7IfDœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-Gs0Wf{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-Gs0Wfœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "BigQueryExecutor-R7IfD",
        "sourceHandle": "{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-R7IfDœ,œnameœ:œquery_resultsœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-Gs0Wf",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-Gs0Wfœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-Gs0Wf",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "total_pr",
            "id": "Prompt-qjr3s",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParserComponent-Gs0Wf{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-Gs0Wfœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-qjr3s{œfieldNameœ:œtotal_prœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-Gs0Wf",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-Gs0Wfœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-qjr3s",
        "targetHandle": "{œfieldNameœ:œtotal_prœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-DoQkB",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "new_star",
            "id": "Prompt-qjr3s",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParserComponent-DoQkB{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-DoQkBœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-qjr3s{œfieldNameœ:œnew_starœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-DoQkB",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-DoQkBœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-qjr3s",
        "targetHandle": "{œfieldNameœ:œnew_starœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-hpuHj",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "repo_pr",
            "id": "Prompt-qjr3s",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParserComponent-hpuHj{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-hpuHjœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-qjr3s{œfieldNameœ:œrepo_prœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-hpuHj",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-hpuHjœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-qjr3s",
        "targetHandle": "{œfieldNameœ:œrepo_prœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-1dCXv",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "followers",
            "id": "Prompt-qjr3s",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParserComponent-1dCXv{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-1dCXvœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-qjr3s{œfieldNameœ:œfollowersœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-1dCXv",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-1dCXvœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-qjr3s",
        "targetHandle": "{œfieldNameœ:œfollowersœ,œidœ:œPrompt-qjr3sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "BigQueryExecutor",
            "id": "BigQueryExecutor-rFmt2",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-5cI73",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-BigQueryExecutor-rFmt2{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-rFmt2œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-5cI73{œfieldNameœ:œtoolsœ,œidœ:œAgent-5cI73œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "BigQueryExecutor-rFmt2",
        "sourceHandle": "{œdataTypeœ:œBigQueryExecutorœ,œidœ:œBigQueryExecutor-rFmt2œ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-5cI73",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-5cI73œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-5cI73",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Yl8f5",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-5cI73{œdataTypeœ:œAgentœ,œidœ:œAgent-5cI73œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-Yl8f5{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Yl8f5œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-5cI73",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-5cI73œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-Yl8f5",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Yl8f5œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "BigQueryExecutor-OqJ2u",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": true,
            "category": "google",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Execute SQL queries on Google BigQuery.",
            "display_name": "BigQuery",
            "documentation": "",
            "edited": false,
            "field_order": [
              "service_account_json_file",
              "query",
              "clean_query"
            ],
            "frozen": false,
            "icon": "Google",
            "key": "BigQueryExecutor",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Query Results",
                "hidden": false,
                "method": "execute_sql",
                "name": "query_results",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "clean_query": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Query",
                "dynamic": false,
                "info": "When enabled, this will automatically clean up your SQL query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\nfrom pathlib import Path\n\nfrom google.auth.exceptions import RefreshError\nfrom google.cloud import bigquery\nfrom google.oauth2.service_account import Credentials\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, MessageTextInput, Output\nfrom langflow.schema.dataframe import DataFrame\n\n\nclass BigQueryExecutorComponent(Component):\n    display_name = \"BigQuery\"\n    description = \"Execute SQL queries on Google BigQuery.\"\n    name = \"BigQueryExecutor\"\n    icon = \"Google\"\n    beta: bool = True\n\n    inputs = [\n        FileInput(\n            name=\"service_account_json_file\",\n            display_name=\"Upload Service Account JSON\",\n            info=\"Upload the JSON file containing Google Cloud service account credentials.\",\n            file_types=[\"json\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to execute on BigQuery.\",\n            required=True,\n            tool_mode=True,\n        ),\n        BoolInput(\n            name=\"clean_query\",\n            display_name=\"Clean Query\",\n            info=\"When enabled, this will automatically clean up your SQL query.\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Query Results\", name=\"query_results\", method=\"execute_sql\"),\n    ]\n\n    def _clean_sql_query(self, query: str) -> str:\n        \"\"\"Clean SQL query by removing surrounding quotes and whitespace.\n\n        Also extracts SQL statements from text that might contain other content.\n\n        Args:\n            query: The SQL query to clean\n\n        Returns:\n            The cleaned SQL query\n        \"\"\"\n        # First, try to extract SQL from code blocks\n        sql_pattern = r\"```(?:sql)?\\s*([\\s\\S]*?)\\s*```\"\n        sql_matches = re.findall(sql_pattern, query, re.IGNORECASE)\n\n        if sql_matches:\n            # If we found SQL in code blocks, use the first match\n            query = sql_matches[0]\n        else:\n            # If no code block, try to find SQL statements\n            # Look for common SQL keywords at the start of lines\n            sql_keywords = r\"(?i)(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP|WITH|MERGE)\"\n            lines = query.split(\"\\n\")\n            sql_lines = []\n            in_sql = False\n\n            for _line in lines:\n                line = _line.strip()\n                if re.match(sql_keywords, line):\n                    in_sql = True\n                if in_sql:\n                    sql_lines.append(line)\n                if line.endswith(\";\"):\n                    in_sql = False\n\n            if sql_lines:\n                query = \"\\n\".join(sql_lines)\n\n        # Remove any backticks that might be at the start or end\n        query = query.strip(\"`\")\n\n        # Then remove surrounding quotes (single or double) if they exist\n        query = query.strip()\n        if (query.startswith('\"') and query.endswith('\"')) or (query.startswith(\"'\") and query.endswith(\"'\")):\n            query = query[1:-1]\n\n        # Finally, clean up any remaining whitespace and ensure no backticks remain\n        query = query.strip()\n        # Remove any remaining backticks, but preserve them if they're part of a table/column name\n        # This regex will remove backticks that are not part of a valid identifier\n        return re.sub(r\"`(?![a-zA-Z0-9_])|(?<![a-zA-Z0-9_])`\", \"\", query)\n\n    def execute_sql(self) -> DataFrame:\n        try:\n            # First try to read the file\n            try:\n                service_account_path = Path(self.service_account_json_file)\n                with service_account_path.open() as f:\n                    credentials_json = json.load(f)\n                    project_id = credentials_json.get(\"project_id\")\n                    if not project_id:\n                        msg = \"No project_id found in service account credentials file.\"\n                        raise ValueError(msg)\n            except FileNotFoundError as e:\n                msg = f\"Service account file not found: {e}\"\n                raise ValueError(msg) from e\n            except json.JSONDecodeError as e:\n                msg = \"Invalid JSON string for service account credentials\"\n                raise ValueError(msg) from e\n\n            # Then try to load credentials\n            try:\n                credentials = Credentials.from_service_account_file(self.service_account_json_file)\n            except Exception as e:\n                msg = f\"Error loading service account credentials: {e}\"\n                raise ValueError(msg) from e\n\n        except ValueError:\n            raise\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        try:\n            client = bigquery.Client(credentials=credentials, project=project_id)\n\n            # Check for empty or whitespace-only query before cleaning\n            if not str(self.query).strip():\n                msg = \"No valid SQL query found in input text.\"\n                raise ValueError(msg)\n\n            # Always clean the query if it contains code block markers, quotes, or if clean_query is enabled\n            if \"```\" in str(self.query) or '\"' in str(self.query) or \"'\" in str(self.query) or self.clean_query:\n                sql_query = self._clean_sql_query(str(self.query))\n            else:\n                sql_query = str(self.query).strip()  # At minimum, strip whitespace\n\n            query_job = client.query(sql_query)\n            results = query_job.result()\n            output_dict = [dict(row) for row in results]\n\n        except RefreshError as e:\n            msg = \"Authentication error: Unable to refresh authentication token. Please try to reauthenticate.\"\n            raise ValueError(msg) from e\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        return DataFrame(output_dict)\n"
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "SQL Query",
                "dynamic": false,
                "info": "The SQL query to execute on BigQuery.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "SELECT   DATE(created_at) AS date,   repository_name,   COUNT(pr_id) AS pr_count FROM   `langflow-data-project.github_data.repositories_pr` WHERE   DATE(created_at) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) GROUP BY   date,   repository_name ORDER BY   date DESC,   repository_name"
              },
              "service_account_json_file": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Upload Service Account JSON",
                "dynamic": false,
                "fileTypes": [
                  "json"
                ],
                "file_path": "",
                "info": "Upload the JSON file containing Google Cloud service account credentials.",
                "list": false,
                "list_add_label": "Add More",
                "name": "service_account_json_file",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "BigQueryExecutor"
        },
        "dragging": false,
        "id": "BigQueryExecutor-OqJ2u",
        "measured": {
          "height": 299,
          "width": 320
        },
        "position": {
          "x": 1265.898668812329,
          "y": 2678.022478977853
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-hpuHj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts text using a template.",
            "display_name": "Parser",
            "documentation": "https://docs.langflow.org/components-processing#parser",
            "edited": false,
            "field_order": [
              "input_data",
              "mode",
              "pattern",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "group_outputs": false,
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "load_from_db": false,
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Stringify"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Text: {text}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-hpuHj",
        "measured": {
          "height": 332,
          "width": 320
        },
        "position": {
          "x": 1627.1661915143318,
          "y": 2674.85713568806
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-5cI73",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "https://docs.langflow.org/agents",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "hidden": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o1-mini",
                  "o1-pro",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-5cI73",
        "measured": {
          "height": 601,
          "width": 320
        },
        "position": {
          "x": 2675.7579317333116,
          "y": 2649.476829421192
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "BigQueryExecutor-OZ01S",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": true,
            "category": "google",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Execute SQL queries on Google BigQuery.",
            "display_name": "BigQuery",
            "documentation": "",
            "edited": false,
            "field_order": [
              "service_account_json_file",
              "query",
              "clean_query"
            ],
            "frozen": false,
            "icon": "Google",
            "key": "BigQueryExecutor",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Query Results",
                "hidden": false,
                "method": "execute_sql",
                "name": "query_results",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "clean_query": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Query",
                "dynamic": false,
                "info": "When enabled, this will automatically clean up your SQL query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\nfrom pathlib import Path\n\nfrom google.auth.exceptions import RefreshError\nfrom google.cloud import bigquery\nfrom google.oauth2.service_account import Credentials\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, MessageTextInput, Output\nfrom langflow.schema.dataframe import DataFrame\n\n\nclass BigQueryExecutorComponent(Component):\n    display_name = \"BigQuery\"\n    description = \"Execute SQL queries on Google BigQuery.\"\n    name = \"BigQueryExecutor\"\n    icon = \"Google\"\n    beta: bool = True\n\n    inputs = [\n        FileInput(\n            name=\"service_account_json_file\",\n            display_name=\"Upload Service Account JSON\",\n            info=\"Upload the JSON file containing Google Cloud service account credentials.\",\n            file_types=[\"json\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to execute on BigQuery.\",\n            required=True,\n            tool_mode=True,\n        ),\n        BoolInput(\n            name=\"clean_query\",\n            display_name=\"Clean Query\",\n            info=\"When enabled, this will automatically clean up your SQL query.\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Query Results\", name=\"query_results\", method=\"execute_sql\"),\n    ]\n\n    def _clean_sql_query(self, query: str) -> str:\n        \"\"\"Clean SQL query by removing surrounding quotes and whitespace.\n\n        Also extracts SQL statements from text that might contain other content.\n\n        Args:\n            query: The SQL query to clean\n\n        Returns:\n            The cleaned SQL query\n        \"\"\"\n        # First, try to extract SQL from code blocks\n        sql_pattern = r\"```(?:sql)?\\s*([\\s\\S]*?)\\s*```\"\n        sql_matches = re.findall(sql_pattern, query, re.IGNORECASE)\n\n        if sql_matches:\n            # If we found SQL in code blocks, use the first match\n            query = sql_matches[0]\n        else:\n            # If no code block, try to find SQL statements\n            # Look for common SQL keywords at the start of lines\n            sql_keywords = r\"(?i)(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP|WITH|MERGE)\"\n            lines = query.split(\"\\n\")\n            sql_lines = []\n            in_sql = False\n\n            for _line in lines:\n                line = _line.strip()\n                if re.match(sql_keywords, line):\n                    in_sql = True\n                if in_sql:\n                    sql_lines.append(line)\n                if line.endswith(\";\"):\n                    in_sql = False\n\n            if sql_lines:\n                query = \"\\n\".join(sql_lines)\n\n        # Remove any backticks that might be at the start or end\n        query = query.strip(\"`\")\n\n        # Then remove surrounding quotes (single or double) if they exist\n        query = query.strip()\n        if (query.startswith('\"') and query.endswith('\"')) or (query.startswith(\"'\") and query.endswith(\"'\")):\n            query = query[1:-1]\n\n        # Finally, clean up any remaining whitespace and ensure no backticks remain\n        query = query.strip()\n        # Remove any remaining backticks, but preserve them if they're part of a table/column name\n        # This regex will remove backticks that are not part of a valid identifier\n        return re.sub(r\"`(?![a-zA-Z0-9_])|(?<![a-zA-Z0-9_])`\", \"\", query)\n\n    def execute_sql(self) -> DataFrame:\n        try:\n            # First try to read the file\n            try:\n                service_account_path = Path(self.service_account_json_file)\n                with service_account_path.open() as f:\n                    credentials_json = json.load(f)\n                    project_id = credentials_json.get(\"project_id\")\n                    if not project_id:\n                        msg = \"No project_id found in service account credentials file.\"\n                        raise ValueError(msg)\n            except FileNotFoundError as e:\n                msg = f\"Service account file not found: {e}\"\n                raise ValueError(msg) from e\n            except json.JSONDecodeError as e:\n                msg = \"Invalid JSON string for service account credentials\"\n                raise ValueError(msg) from e\n\n            # Then try to load credentials\n            try:\n                credentials = Credentials.from_service_account_file(self.service_account_json_file)\n            except Exception as e:\n                msg = f\"Error loading service account credentials: {e}\"\n                raise ValueError(msg) from e\n\n        except ValueError:\n            raise\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        try:\n            client = bigquery.Client(credentials=credentials, project=project_id)\n\n            # Check for empty or whitespace-only query before cleaning\n            if not str(self.query).strip():\n                msg = \"No valid SQL query found in input text.\"\n                raise ValueError(msg)\n\n            # Always clean the query if it contains code block markers, quotes, or if clean_query is enabled\n            if \"```\" in str(self.query) or '\"' in str(self.query) or \"'\" in str(self.query) or self.clean_query:\n                sql_query = self._clean_sql_query(str(self.query))\n            else:\n                sql_query = str(self.query).strip()  # At minimum, strip whitespace\n\n            query_job = client.query(sql_query)\n            results = query_job.result()\n            output_dict = [dict(row) for row in results]\n\n        except RefreshError as e:\n            msg = \"Authentication error: Unable to refresh authentication token. Please try to reauthenticate.\"\n            raise ValueError(msg) from e\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        return DataFrame(output_dict)\n"
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "SQL Query",
                "dynamic": false,
                "info": "The SQL query to execute on BigQuery.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "SELECT repository_name, extracted_at, followers_count  FROM `langflow-data-project.x_data.repository_profiles`   WHERE    DATE(extracted_at) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND   repository_name IN ('Crewai', 'Dify', 'Flowise', 'LangChain', 'Langflow', 'n8n')  ORDER BY extracted_at, repository_name"
              },
              "service_account_json_file": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Upload Service Account JSON",
                "dynamic": false,
                "fileTypes": [
                  "json"
                ],
                "file_path": "",
                "info": "Upload the JSON file containing Google Cloud service account credentials.",
                "list": false,
                "list_add_label": "Add More",
                "name": "service_account_json_file",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "BigQueryExecutor"
        },
        "dragging": false,
        "id": "BigQueryExecutor-OZ01S",
        "measured": {
          "height": 299,
          "width": 320
        },
        "position": {
          "x": 1262.3019092642962,
          "y": 1877.0034167494393
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-1dCXv",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts text using a template.",
            "display_name": "Parser",
            "documentation": "https://docs.langflow.org/components-processing#parser",
            "edited": false,
            "field_order": [
              "input_data",
              "mode",
              "pattern",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "group_outputs": false,
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "load_from_db": false,
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Stringify"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Text: {text}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-1dCXv",
        "measured": {
          "height": 332,
          "width": 320
        },
        "position": {
          "x": 1625.7286209089589,
          "y": 1882.7067819601314
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CalculatorComponent-fIpls",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Perform basic arithmetic operations on a given expression.",
            "display_name": "Calculator",
            "documentation": "https://docs.langflow.org/components-helpers#calculator",
            "edited": false,
            "field_order": [
              "expression"
            ],
            "frozen": false,
            "icon": "calculator",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema.data import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    documentation: str = \"https://docs.langflow.org/components-helpers#calculator\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
              },
              "expression": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Expression",
                "dynamic": false,
                "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "expression",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "expression": {
                        "default": "",
                        "description": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                        "title": "Expression",
                        "type": "string"
                      }
                    },
                    "description": "Perform basic arithmetic operations on a given expression.",
                    "display_description": "Perform basic arithmetic operations on a given expression.",
                    "display_name": "evaluate_expression",
                    "name": "evaluate_expression",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "evaluate_expression"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "CalculatorComponent"
        },
        "dragging": false,
        "id": "CalculatorComponent-fIpls",
        "measured": {
          "height": 219,
          "width": 320
        },
        "position": {
          "x": 2131.045314832269,
          "y": 3019.980477226371
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-qjr3s",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "repo_pr",
                "new_star",
                "followers",
                "total_pr"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "group_outputs": false,
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "followers": {
                "advanced": false,
                "display_name": "followers",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "followers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "new_star": {
                "advanced": false,
                "display_name": "new_star",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "new_star",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "repo_pr": {
                "advanced": false,
                "display_name": "repo_pr",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "repo_pr",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "# 🧠 Agent Task Prompt\n\nYou will receive the following datasets as variables:\n\n- `repo_pr`: Number of new Pull Requests created in the last 7 days per repository  \n- `new_star`: Number of new GitHub stars per repository in the last 7 days  \n- `followers`: Daily follower count on Twitter per repository  \n- `total_pr`: Total number of Pull Requests per repository  \n\n## ✅ Tasks\n\n1. **Calculate the percentage growth of Twitter followers** for each repository.  \n   Use the earliest and most recent available data to compute:\n\n \n   followers_growth_% = ((latest_followers - earliest_followers) / earliest_followers) * 100\n\n2. Aggregate the total number of new GitHub stars per repository from new_star.\n\n3. Aggregate the total number of new PRs opened in the last 7 days per repository from repo_pr.\n\n4. Calculate the proportion of new PRs relative to the total PRs for each repository using the total_pr dataset:\n\n  pr_growth_ratio = total_new_prs / total_prs\n\n## 📊 Output\n\nGenerate a table with the following columns:\n\n| repository_name | followers_growth_% | total_new_stars | total_new_prs | total_prs | pr_growth_ratio |\n|------------------|---------------------|------------------|----------------|------------|-------------------|\n\n## 📝 Final Analysis\n\nWrite a short and insightful interpretation of the results, including:\n\n- Which repositories had the highest follower growth\n- Which repositories received the most traction through new stars or PRs\n- Which repositories have a high `pr_growth_ratio`, indicating active or increasing development activity\n\n## 📝 Final Task\n\nUse the **BigQuery** component to generate and execute a SQL query that creates a table with the following ID:\n`langflow-data-project.github_data.test`\n\nThe table should include the following columns, based on your computed results:\n\n- `repository_name`\n- `followers_growth_%`\n- `total_new_stars`\n- `total_new_prs`\n- `total_prs`\n- `pr_growth_ratio`\n\nMake sure the query correctly inserts or writes the calculated values into this table, using the appropriate SQL syntax for BigQuery.\n\n\n--------\nrepo_pr: {repo_pr}\nnew_star: {new_star}\nfollowers: {followers}\ntotal_pr: {total_pr}\n\n\n"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "total_pr": {
                "advanced": false,
                "display_name": "total_pr",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "total_pr",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-qjr3s",
        "measured": {
          "height": 620,
          "width": 320
        },
        "position": {
          "x": 2128.5337982968535,
          "y": 2258.485176537168
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "BigQueryExecutor-AZEIj",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": true,
            "category": "google",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Execute SQL queries on Google BigQuery.",
            "display_name": "BigQuery",
            "documentation": "",
            "edited": false,
            "field_order": [
              "service_account_json_file",
              "query",
              "clean_query"
            ],
            "frozen": false,
            "icon": "Google",
            "key": "BigQueryExecutor",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Query Results",
                "hidden": false,
                "method": "execute_sql",
                "name": "query_results",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "clean_query": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Query",
                "dynamic": false,
                "info": "When enabled, this will automatically clean up your SQL query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\nfrom pathlib import Path\n\nfrom google.auth.exceptions import RefreshError\nfrom google.cloud import bigquery\nfrom google.oauth2.service_account import Credentials\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, MessageTextInput, Output\nfrom langflow.schema.dataframe import DataFrame\n\n\nclass BigQueryExecutorComponent(Component):\n    display_name = \"BigQuery\"\n    description = \"Execute SQL queries on Google BigQuery.\"\n    name = \"BigQueryExecutor\"\n    icon = \"Google\"\n    beta: bool = True\n\n    inputs = [\n        FileInput(\n            name=\"service_account_json_file\",\n            display_name=\"Upload Service Account JSON\",\n            info=\"Upload the JSON file containing Google Cloud service account credentials.\",\n            file_types=[\"json\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to execute on BigQuery.\",\n            required=True,\n            tool_mode=True,\n        ),\n        BoolInput(\n            name=\"clean_query\",\n            display_name=\"Clean Query\",\n            info=\"When enabled, this will automatically clean up your SQL query.\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Query Results\", name=\"query_results\", method=\"execute_sql\"),\n    ]\n\n    def _clean_sql_query(self, query: str) -> str:\n        \"\"\"Clean SQL query by removing surrounding quotes and whitespace.\n\n        Also extracts SQL statements from text that might contain other content.\n\n        Args:\n            query: The SQL query to clean\n\n        Returns:\n            The cleaned SQL query\n        \"\"\"\n        # First, try to extract SQL from code blocks\n        sql_pattern = r\"```(?:sql)?\\s*([\\s\\S]*?)\\s*```\"\n        sql_matches = re.findall(sql_pattern, query, re.IGNORECASE)\n\n        if sql_matches:\n            # If we found SQL in code blocks, use the first match\n            query = sql_matches[0]\n        else:\n            # If no code block, try to find SQL statements\n            # Look for common SQL keywords at the start of lines\n            sql_keywords = r\"(?i)(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP|WITH|MERGE)\"\n            lines = query.split(\"\\n\")\n            sql_lines = []\n            in_sql = False\n\n            for _line in lines:\n                line = _line.strip()\n                if re.match(sql_keywords, line):\n                    in_sql = True\n                if in_sql:\n                    sql_lines.append(line)\n                if line.endswith(\";\"):\n                    in_sql = False\n\n            if sql_lines:\n                query = \"\\n\".join(sql_lines)\n\n        # Remove any backticks that might be at the start or end\n        query = query.strip(\"`\")\n\n        # Then remove surrounding quotes (single or double) if they exist\n        query = query.strip()\n        if (query.startswith('\"') and query.endswith('\"')) or (query.startswith(\"'\") and query.endswith(\"'\")):\n            query = query[1:-1]\n\n        # Finally, clean up any remaining whitespace and ensure no backticks remain\n        query = query.strip()\n        # Remove any remaining backticks, but preserve them if they're part of a table/column name\n        # This regex will remove backticks that are not part of a valid identifier\n        return re.sub(r\"`(?![a-zA-Z0-9_])|(?<![a-zA-Z0-9_])`\", \"\", query)\n\n    def execute_sql(self) -> DataFrame:\n        try:\n            # First try to read the file\n            try:\n                service_account_path = Path(self.service_account_json_file)\n                with service_account_path.open() as f:\n                    credentials_json = json.load(f)\n                    project_id = credentials_json.get(\"project_id\")\n                    if not project_id:\n                        msg = \"No project_id found in service account credentials file.\"\n                        raise ValueError(msg)\n            except FileNotFoundError as e:\n                msg = f\"Service account file not found: {e}\"\n                raise ValueError(msg) from e\n            except json.JSONDecodeError as e:\n                msg = \"Invalid JSON string for service account credentials\"\n                raise ValueError(msg) from e\n\n            # Then try to load credentials\n            try:\n                credentials = Credentials.from_service_account_file(self.service_account_json_file)\n            except Exception as e:\n                msg = f\"Error loading service account credentials: {e}\"\n                raise ValueError(msg) from e\n\n        except ValueError:\n            raise\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        try:\n            client = bigquery.Client(credentials=credentials, project=project_id)\n\n            # Check for empty or whitespace-only query before cleaning\n            if not str(self.query).strip():\n                msg = \"No valid SQL query found in input text.\"\n                raise ValueError(msg)\n\n            # Always clean the query if it contains code block markers, quotes, or if clean_query is enabled\n            if \"```\" in str(self.query) or '\"' in str(self.query) or \"'\" in str(self.query) or self.clean_query:\n                sql_query = self._clean_sql_query(str(self.query))\n            else:\n                sql_query = str(self.query).strip()  # At minimum, strip whitespace\n\n            query_job = client.query(sql_query)\n            results = query_job.result()\n            output_dict = [dict(row) for row in results]\n\n        except RefreshError as e:\n            msg = \"Authentication error: Unable to refresh authentication token. Please try to reauthenticate.\"\n            raise ValueError(msg) from e\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        return DataFrame(output_dict)\n"
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "SQL Query",
                "dynamic": false,
                "info": "The SQL query to execute on BigQuery.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "SELECT   DATE(created_at) AS date,   repository_name,   SUM(star_count) AS daily_new_stars FROM   `langflow-data-project.github_data.repository_metrics` WHERE   DATE(created_at) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) GROUP BY   date,   repository_name ORDER BY   date DESC,   repository_name"
              },
              "service_account_json_file": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Upload Service Account JSON",
                "dynamic": false,
                "fileTypes": [
                  "json"
                ],
                "file_path": "",
                "info": "Upload the JSON file containing Google Cloud service account credentials.",
                "list": false,
                "list_add_label": "Add More",
                "name": "service_account_json_file",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "BigQueryExecutor"
        },
        "dragging": false,
        "id": "BigQueryExecutor-AZEIj",
        "measured": {
          "height": 299,
          "width": 320
        },
        "position": {
          "x": 1263.3835253167358,
          "y": 2282.7406474113996
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-DoQkB",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts text using a template.",
            "display_name": "Parser",
            "documentation": "https://docs.langflow.org/components-processing#parser",
            "edited": false,
            "field_order": [
              "input_data",
              "mode",
              "pattern",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "group_outputs": false,
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "load_from_db": false,
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Stringify"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Text: {text}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-DoQkB",
        "measured": {
          "height": 332,
          "width": 320
        },
        "position": {
          "x": 1628.494817216077,
          "y": 2274.4502785251548
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "BigQueryExecutor-R7IfD",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": true,
            "category": "google",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Execute SQL queries on Google BigQuery.",
            "display_name": "BigQuery",
            "documentation": "",
            "edited": false,
            "field_order": [
              "service_account_json_file",
              "query",
              "clean_query"
            ],
            "frozen": false,
            "icon": "Google",
            "key": "BigQueryExecutor",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Query Results",
                "hidden": false,
                "method": "execute_sql",
                "name": "query_results",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "clean_query": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Query",
                "dynamic": false,
                "info": "When enabled, this will automatically clean up your SQL query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\nfrom pathlib import Path\n\nfrom google.auth.exceptions import RefreshError\nfrom google.cloud import bigquery\nfrom google.oauth2.service_account import Credentials\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, MessageTextInput, Output\nfrom langflow.schema.dataframe import DataFrame\n\n\nclass BigQueryExecutorComponent(Component):\n    display_name = \"BigQuery\"\n    description = \"Execute SQL queries on Google BigQuery.\"\n    name = \"BigQueryExecutor\"\n    icon = \"Google\"\n    beta: bool = True\n\n    inputs = [\n        FileInput(\n            name=\"service_account_json_file\",\n            display_name=\"Upload Service Account JSON\",\n            info=\"Upload the JSON file containing Google Cloud service account credentials.\",\n            file_types=[\"json\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to execute on BigQuery.\",\n            required=True,\n            tool_mode=True,\n        ),\n        BoolInput(\n            name=\"clean_query\",\n            display_name=\"Clean Query\",\n            info=\"When enabled, this will automatically clean up your SQL query.\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Query Results\", name=\"query_results\", method=\"execute_sql\"),\n    ]\n\n    def _clean_sql_query(self, query: str) -> str:\n        \"\"\"Clean SQL query by removing surrounding quotes and whitespace.\n\n        Also extracts SQL statements from text that might contain other content.\n\n        Args:\n            query: The SQL query to clean\n\n        Returns:\n            The cleaned SQL query\n        \"\"\"\n        # First, try to extract SQL from code blocks\n        sql_pattern = r\"```(?:sql)?\\s*([\\s\\S]*?)\\s*```\"\n        sql_matches = re.findall(sql_pattern, query, re.IGNORECASE)\n\n        if sql_matches:\n            # If we found SQL in code blocks, use the first match\n            query = sql_matches[0]\n        else:\n            # If no code block, try to find SQL statements\n            # Look for common SQL keywords at the start of lines\n            sql_keywords = r\"(?i)(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP|WITH|MERGE)\"\n            lines = query.split(\"\\n\")\n            sql_lines = []\n            in_sql = False\n\n            for _line in lines:\n                line = _line.strip()\n                if re.match(sql_keywords, line):\n                    in_sql = True\n                if in_sql:\n                    sql_lines.append(line)\n                if line.endswith(\";\"):\n                    in_sql = False\n\n            if sql_lines:\n                query = \"\\n\".join(sql_lines)\n\n        # Remove any backticks that might be at the start or end\n        query = query.strip(\"`\")\n\n        # Then remove surrounding quotes (single or double) if they exist\n        query = query.strip()\n        if (query.startswith('\"') and query.endswith('\"')) or (query.startswith(\"'\") and query.endswith(\"'\")):\n            query = query[1:-1]\n\n        # Finally, clean up any remaining whitespace and ensure no backticks remain\n        query = query.strip()\n        # Remove any remaining backticks, but preserve them if they're part of a table/column name\n        # This regex will remove backticks that are not part of a valid identifier\n        return re.sub(r\"`(?![a-zA-Z0-9_])|(?<![a-zA-Z0-9_])`\", \"\", query)\n\n    def execute_sql(self) -> DataFrame:\n        try:\n            # First try to read the file\n            try:\n                service_account_path = Path(self.service_account_json_file)\n                with service_account_path.open() as f:\n                    credentials_json = json.load(f)\n                    project_id = credentials_json.get(\"project_id\")\n                    if not project_id:\n                        msg = \"No project_id found in service account credentials file.\"\n                        raise ValueError(msg)\n            except FileNotFoundError as e:\n                msg = f\"Service account file not found: {e}\"\n                raise ValueError(msg) from e\n            except json.JSONDecodeError as e:\n                msg = \"Invalid JSON string for service account credentials\"\n                raise ValueError(msg) from e\n\n            # Then try to load credentials\n            try:\n                credentials = Credentials.from_service_account_file(self.service_account_json_file)\n            except Exception as e:\n                msg = f\"Error loading service account credentials: {e}\"\n                raise ValueError(msg) from e\n\n        except ValueError:\n            raise\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        try:\n            client = bigquery.Client(credentials=credentials, project=project_id)\n\n            # Check for empty or whitespace-only query before cleaning\n            if not str(self.query).strip():\n                msg = \"No valid SQL query found in input text.\"\n                raise ValueError(msg)\n\n            # Always clean the query if it contains code block markers, quotes, or if clean_query is enabled\n            if \"```\" in str(self.query) or '\"' in str(self.query) or \"'\" in str(self.query) or self.clean_query:\n                sql_query = self._clean_sql_query(str(self.query))\n            else:\n                sql_query = str(self.query).strip()  # At minimum, strip whitespace\n\n            query_job = client.query(sql_query)\n            results = query_job.result()\n            output_dict = [dict(row) for row in results]\n\n        except RefreshError as e:\n            msg = \"Authentication error: Unable to refresh authentication token. Please try to reauthenticate.\"\n            raise ValueError(msg) from e\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        return DataFrame(output_dict)\n"
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "SQL Query",
                "dynamic": false,
                "info": "The SQL query to execute on BigQuery.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "SELECT    repository_name,    COUNT(DISTINCT pr_id) AS total_prs FROM `langflow-data-project.github_data.repositories_pr` GROUP BY repository_name ORDER BY repository_name;"
              },
              "service_account_json_file": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Upload Service Account JSON",
                "dynamic": false,
                "fileTypes": [
                  "json"
                ],
                "file_path": "",
                "info": "Upload the JSON file containing Google Cloud service account credentials.",
                "list": false,
                "list_add_label": "Add More",
                "name": "service_account_json_file",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "BigQueryExecutor"
        },
        "dragging": false,
        "id": "BigQueryExecutor-R7IfD",
        "measured": {
          "height": 299,
          "width": 320
        },
        "position": {
          "x": 1265.2694379833997,
          "y": 3067.074352962905
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-Gs0Wf",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Extracts text using a template.",
            "display_name": "Parser",
            "documentation": "https://docs.langflow.org/components-processing#parser",
            "edited": false,
            "field_order": [
              "input_data",
              "mode",
              "pattern",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "group_outputs": false,
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, HandleInput, MessageTextInput, MultilineInput, TabInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.template.field.base import Output\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = \"Extracts text using a template.\"\n    documentation: str = \"https://docs.langflow.org/components-processing#parser\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([safe_convert(item, clean_data=self.clean_data or False) for item in self.input_data])\n        else:\n            result = safe_convert(self.input_data or False)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "load_from_db": false,
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Stringify"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Text: {text}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "dragging": false,
        "id": "ParserComponent-Gs0Wf",
        "measured": {
          "height": 332,
          "width": 320
        },
        "position": {
          "x": 1640.6307810756427,
          "y": 3067.752778870449
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "BigQueryExecutor-rFmt2",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": true,
            "category": "google",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Execute SQL queries on Google BigQuery.",
            "display_name": "BigQuery",
            "documentation": "",
            "edited": false,
            "field_order": [
              "service_account_json_file",
              "query",
              "clean_query"
            ],
            "frozen": false,
            "icon": "Google",
            "key": "BigQueryExecutor",
            "last_updated": "2025-08-07T12:32:45.744Z",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "clean_query": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Query",
                "dynamic": false,
                "info": "When enabled, this will automatically clean up your SQL query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\nfrom pathlib import Path\n\nfrom google.auth.exceptions import RefreshError\nfrom google.cloud import bigquery\nfrom google.oauth2.service_account import Credentials\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, MessageTextInput, Output\nfrom langflow.schema.dataframe import DataFrame\n\n\nclass BigQueryExecutorComponent(Component):\n    display_name = \"BigQuery\"\n    description = \"Execute SQL queries on Google BigQuery.\"\n    name = \"BigQueryExecutor\"\n    icon = \"Google\"\n    beta: bool = True\n\n    inputs = [\n        FileInput(\n            name=\"service_account_json_file\",\n            display_name=\"Upload Service Account JSON\",\n            info=\"Upload the JSON file containing Google Cloud service account credentials.\",\n            file_types=[\"json\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"SQL Query\",\n            info=\"The SQL query to execute on BigQuery.\",\n            required=True,\n            tool_mode=True,\n        ),\n        BoolInput(\n            name=\"clean_query\",\n            display_name=\"Clean Query\",\n            info=\"When enabled, this will automatically clean up your SQL query.\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Query Results\", name=\"query_results\", method=\"execute_sql\"),\n    ]\n\n    def _clean_sql_query(self, query: str) -> str:\n        \"\"\"Clean SQL query by removing surrounding quotes and whitespace.\n\n        Also extracts SQL statements from text that might contain other content.\n\n        Args:\n            query: The SQL query to clean\n\n        Returns:\n            The cleaned SQL query\n        \"\"\"\n        # First, try to extract SQL from code blocks\n        sql_pattern = r\"```(?:sql)?\\s*([\\s\\S]*?)\\s*```\"\n        sql_matches = re.findall(sql_pattern, query, re.IGNORECASE)\n\n        if sql_matches:\n            # If we found SQL in code blocks, use the first match\n            query = sql_matches[0]\n        else:\n            # If no code block, try to find SQL statements\n            # Look for common SQL keywords at the start of lines\n            sql_keywords = r\"(?i)(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP|WITH|MERGE)\"\n            lines = query.split(\"\\n\")\n            sql_lines = []\n            in_sql = False\n\n            for _line in lines:\n                line = _line.strip()\n                if re.match(sql_keywords, line):\n                    in_sql = True\n                if in_sql:\n                    sql_lines.append(line)\n                if line.endswith(\";\"):\n                    in_sql = False\n\n            if sql_lines:\n                query = \"\\n\".join(sql_lines)\n\n        # Remove any backticks that might be at the start or end\n        query = query.strip(\"`\")\n\n        # Then remove surrounding quotes (single or double) if they exist\n        query = query.strip()\n        if (query.startswith('\"') and query.endswith('\"')) or (query.startswith(\"'\") and query.endswith(\"'\")):\n            query = query[1:-1]\n\n        # Finally, clean up any remaining whitespace and ensure no backticks remain\n        query = query.strip()\n        # Remove any remaining backticks, but preserve them if they're part of a table/column name\n        # This regex will remove backticks that are not part of a valid identifier\n        return re.sub(r\"`(?![a-zA-Z0-9_])|(?<![a-zA-Z0-9_])`\", \"\", query)\n\n    def execute_sql(self) -> DataFrame:\n        try:\n            # First try to read the file\n            try:\n                service_account_path = Path(self.service_account_json_file)\n                with service_account_path.open() as f:\n                    credentials_json = json.load(f)\n                    project_id = credentials_json.get(\"project_id\")\n                    if not project_id:\n                        msg = \"No project_id found in service account credentials file.\"\n                        raise ValueError(msg)\n            except FileNotFoundError as e:\n                msg = f\"Service account file not found: {e}\"\n                raise ValueError(msg) from e\n            except json.JSONDecodeError as e:\n                msg = \"Invalid JSON string for service account credentials\"\n                raise ValueError(msg) from e\n\n            # Then try to load credentials\n            try:\n                credentials = Credentials.from_service_account_file(self.service_account_json_file)\n            except Exception as e:\n                msg = f\"Error loading service account credentials: {e}\"\n                raise ValueError(msg) from e\n\n        except ValueError:\n            raise\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        try:\n            client = bigquery.Client(credentials=credentials, project=project_id)\n\n            # Check for empty or whitespace-only query before cleaning\n            if not str(self.query).strip():\n                msg = \"No valid SQL query found in input text.\"\n                raise ValueError(msg)\n\n            # Always clean the query if it contains code block markers, quotes, or if clean_query is enabled\n            if \"```\" in str(self.query) or '\"' in str(self.query) or \"'\" in str(self.query) or self.clean_query:\n                sql_query = self._clean_sql_query(str(self.query))\n            else:\n                sql_query = str(self.query).strip()  # At minimum, strip whitespace\n\n            query_job = client.query(sql_query)\n            results = query_job.result()\n            output_dict = [dict(row) for row in results]\n\n        except RefreshError as e:\n            msg = \"Authentication error: Unable to refresh authentication token. Please try to reauthenticate.\"\n            raise ValueError(msg) from e\n        except Exception as e:\n            msg = f\"Error executing BigQuery SQL query: {e}\"\n            raise ValueError(msg) from e\n\n        return DataFrame(output_dict)\n"
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "SQL Query",
                "dynamic": false,
                "info": "The SQL query to execute on BigQuery.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "service_account_json_file": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Upload Service Account JSON",
                "dynamic": false,
                "fileTypes": [
                  "json"
                ],
                "file_path": "",
                "info": "Upload the JSON file containing Google Cloud service account credentials.",
                "list": false,
                "list_add_label": "Add More",
                "name": "service_account_json_file",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "query": {
                        "description": "The SQL query to execute on BigQuery.",
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "BigQueryExecutor. execute_sql - Execute SQL queries on Google BigQuery.",
                    "display_description": "BigQueryExecutor. execute_sql - Execute SQL queries on Google BigQuery.",
                    "display_name": "execute_sql",
                    "name": "execute_sql",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "execute_sql"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "BigQueryExecutor"
        },
        "dragging": false,
        "id": "BigQueryExecutor-rFmt2",
        "measured": {
          "height": 296,
          "width": 320
        },
        "position": {
          "x": 2126.494826908508,
          "y": 3336.3872987179325
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-Yl8f5",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "https://docs.langflow.org/components-io#chat-output",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-Yl8f5",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 3136.5646329424,
          "y": 2659.1268211205515
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -1188.0487272437467,
      "y": -1615.970959793246,
      "zoom": 0.7804839068062306
    }
  },
  "description": "Aggregates and analyzes GitHub and Twitter growth data, saving key metrics into BigQuery.",
  "endpoint_name": null,
  "id": "bf879954-10d2-4784-ab98-2f8ad5877e03",
  "is_component": false,
  "last_tested_version": "1.5.0.post1",
  "name": "multi-source_retrieval",
  "tags": [
    "chatbots",
    "openai",
    "assistants"
  ]
}